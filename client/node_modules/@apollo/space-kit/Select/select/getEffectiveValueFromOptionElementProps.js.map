{"version":3,"file":"getEffectiveValueFromOptionElementProps.js","sources":["../../src/Select/select/getEffectiveValueFromOptionElementProps.ts"],"sourcesContent":["type OptionProps = React.DetailedHTMLProps<\n  React.OptionHTMLAttributes<HTMLOptionElement>,\n  HTMLOptionElement\n>;\n\n/**\n * Return the effective `value` of an `option` element\n *\n * If the `value` prop is found; then it will be stringified and returned.\n *\n * If there is no `value` prop and `children` is stringifiable (it's a `string`,\n * `number`, or `null`), then return the stringiifed `children`. We\n * intentionally exclude `undefined` here to prevent accidents.\n *\n * Otherwise throw an error.\n */\nexport function getEffectiveValueFromOptionElementProps(\n  props: OptionProps,\n): string {\n  if (Object.prototype.hasOwnProperty.call(props, \"value\")) {\n    return String(props.value);\n  }\n\n  if (\n    typeof props.children === \"string\" ||\n    typeof props.children === \"number\" ||\n    props.children == null\n  ) {\n    return String(props.children);\n  }\n\n  throw new TypeError(\n    \"All `option` children of `Select` are expected to have either a `value` prop or a `children` prop that is can be interpreted as a `string`\",\n  );\n}\n"],"names":["getEffectiveValueFromOptionElementProps","props","Object","prototype","hasOwnProperty","call","String","value","children","TypeError"],"mappings":";;;;AAKA;;;;;;;;;;;AAWA,SAAgBA,wCACdC;MAEIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,KAArC,EAA4C,OAA5C,CAAJ,EAA0D;WACjDK,MAAM,CAACL,KAAK,CAACM,KAAP,CAAb;;;MAIA,OAAON,KAAK,CAACO,QAAb,KAA0B,QAA1B,IACA,OAAOP,KAAK,CAACO,QAAb,KAA0B,QAD1B,IAEAP,KAAK,CAACO,QAAN,IAAkB,IAHpB,EAIE;WACOF,MAAM,CAACL,KAAK,CAACO,QAAP,CAAb;;;QAGI,IAAIC,SAAJ,CACJ,4IADI,CAAN;;;;;"}