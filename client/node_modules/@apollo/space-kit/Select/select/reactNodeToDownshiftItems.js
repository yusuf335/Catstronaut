'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactDom = require('react-dom');

function isHTMLOptionElement(element) {
  if (! /*#__PURE__*/React__default.isValidElement(element)) {
    return false;
  } // This is a special check performed only for MDX processing in storybook


  if (element.props.originalType) {
    return element.props.originalType === "option";
  }

  if (typeof element.type === "string") {
    return element.type === "option";
  }

  return renderHTML(element) instanceof HTMLOptionElement;
}

function renderHTML(element) {
  var div = document.createElement("div");
  reactDom.render(element, div);

  if (div.childNodes.length !== 1) {
    throw new Error("BUG: must only have one child");
  }

  return div.childNodes[0];
}

function isHTMLOptgroupElement(element) {
  if (! /*#__PURE__*/React__default.isValidElement(element)) {
    return false;
  } // This is a special check performed only for MDX processing in storybook


  if (element.props.originalType) {
    return element.props.originalType === "optgroup";
  }

  if (typeof element.type === "string") {
    return element.type === "optgroup";
  }

  return renderHTML(element) instanceof HTMLOptGroupElement;
}

function validateOptionProps(element) {
  if (Object.prototype.hasOwnProperty.call(element.props, "value") || typeof element.props.children === "string") {
    return element.props;
  }

  throw new TypeError("All `option`s in a `Select` are required to have a `value` set or have `children` be a string to imply a value.");
}
/**
 * Convert a `children` prop rendered with `<optgroup><option /></optgroup>` and
 * `<option />` elements into an array of the props of each of those `option`
 * elements.
 */


function reactNodeToDownshiftItems(children) {
  return React__default.Children.toArray(children).reduce(function (accumulator, child) {
    if (isHTMLOptionElement(child)) {
      return accumulator.concat(validateOptionProps(child));
    }

    if (! /*#__PURE__*/React__default.isValidElement(child)) {
      return accumulator;
    }

    return accumulator.concat(React__default.Children.toArray(child.props.children).filter(isHTMLOptionElement).map(function (optgroupChild) {
      return validateOptionProps(optgroupChild);
    }));
  }, []);
}

exports.isHTMLOptgroupElement = isHTMLOptgroupElement;
exports.isHTMLOptionElement = isHTMLOptionElement;
exports.reactNodeToDownshiftItems = reactNodeToDownshiftItems;
//# sourceMappingURL=reactNodeToDownshiftItems.js.map
