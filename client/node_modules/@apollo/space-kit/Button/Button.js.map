{"version":3,"file":"Button.js","sources":["../src/Button/Button.tsx"],"sourcesContent":["/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport { colors, ShadedColor } from \"../colors\";\nimport type { Property, SimplePseudos } from \"csstype\";\nimport { base } from \"../typography\";\nimport { ClassNames, jsx, ObjectInterpolation } from \"@emotion/core\";\nimport { getOffsetInPalette } from \"../colors/utils/getOffsetInPalette\";\nimport tinycolor from \"tinycolor2\";\nimport React, { useState } from \"react\";\nimport { LoadingSpinner } from \"../Loaders\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport omit from \"lodash/omit\";\nimport { ButtonIcon } from \"./button/ButtonIcon\";\nimport { inputHeightDictionary } from \"../shared/inputHeightDictionary\";\nimport { useTooltipContext } from \"../shared/TooltipContext\";\nimport { useSpaceKitProvider } from \"../SpaceKitProvider\";\ntype TLength = string | 0 | number;\n\n/**\n * Save a default color so we can check if we used the default or not. The\n * default color has a few special properties.\n */\nconst defaultColor = colors.silver.light;\n\n/**\n * Get the button's text color\n */\nfunction getTextColor({\n  color,\n  feel,\n  theme,\n  mode,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n  mode?: SimplePseudos;\n}): Property.Color | undefined {\n  // Text color will always be the same for secondary buttons\n  if (color === colors.white) {\n    return colors.grey.darker;\n  }\n\n  switch (feel) {\n    case \"raised\":\n      // Set the base (meaning no pseudo-selectors) text color for raised\n      // buttons. Otherwise return `undefined` to not change the color.\n      //\n      // We have some special logic for the raised color; set the text color to\n      // be what is most readable between white and the default text color and\n      // the _hover_ color's background. This is overrideable by the user, but\n      // it shouldn't need to be.\n      return !mode\n        ? tinycolor\n            .mostReadable(\n              getHoverBackgroundColor({ color, feel, theme }),\n              [colors.white, colors.grey.darker],\n              {\n                level: \"AA\",\n                size: \"small\",\n              },\n            )\n            .toString()\n        : undefined;\n    case \"flat\":\n      if (color === defaultColor) {\n        return theme === \"dark\" ? colors.grey.light : colors.grey.darker;\n      }\n\n      // We have a custom color and we're in dark mode, lighten the base and\n      // focused colors 1 shade.\n      if (theme === \"dark\" && (!mode || mode === \":focus\")) {\n        return getOffsetInPalette(1, \"lighter\", color);\n      }\n\n      return color;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n/**\n * Get the button's height\n */\nfunction getHeight({\n  size,\n}: {\n  size: NonNullable<Props[\"size\"]>;\n}): Property.Height<TLength> {\n  switch (size) {\n    case \"small\":\n      return 28;\n    case \"default\":\n    case \"standard\":\n      return 36;\n    case \"large\":\n      return 42;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(size);\n  }\n}\n\n/**\n * Get the hover background color\n */\nfunction getHoverBackgroundColor({\n  color,\n  feel,\n  theme,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n}): Property.BackgroundColor {\n  if (color === colors.white) {\n    // Special case for secondary buttons\n    return colors.silver.light;\n  }\n\n  switch (feel) {\n    case \"flat\":\n      // Hardcode if we're using the default color (special case), otherwise get\n      // the next lightest color.\n      if (color === defaultColor) {\n        return theme === \"light\" ? colors.silver.light : colors.grey.dark;\n      }\n\n      return getOffsetInPalette(Infinity, \"lighter\", color);\n    case \"raised\":\n      // One shade darker\n      return getOffsetInPalette(1, \"darker\", color);\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n// Types that could use some improvement:\n// * Don't allow `children` and `icon` to be missing\n// * Don't allow `children` when `FAB`\n//\n// I was able to get guarantees to work, but only with very cryptic errors. I\n// decided it'd be best, for the time being, to `throw` if we use things\n// incorrectly.\ninterface Props\n  extends Omit<\n    React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>,\n    \"css\"\n  > {\n  /**\n   * Override the the default element used to render a button\n   *\n   * All props provided will be merged with props that `Button` adds, including\n   * `className`s being merged.\n   *\n   * @default <button />\n   */\n  as?: React.ReactElement;\n\n  /**\n   * Base color to calculate all other colors with\n   *\n   * This has a special meaning for buttons with a \"flat\" feel; this will change\n   * the text color as well as the background colors.\n   *\n   * Pass `colors.white` to treat this button as a secondary button\n   *\n   * @default colors.silver.light\n   */\n  color?: ShadedColor | typeof colors[\"white\"];\n\n  /**\n   * If the button will appear and behave disabled.\n   *\n   * This will be directly applied to the underlying `button` with a notable\n   * exception: if this `Button` is rendered inside of a `Tooltip`, is disabled,\n   * and the pointer is over the button, the `disabled` prop will be removed\n   * from the `button` element and the disabled styles will be directly applied.\n   * This will allow disabled buttons to still use `Tooltip`.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Icon to use at the end of a button\n   *\n   * The size of icons will be automatically determined, but can be overriden\n   */\n  endIcon?: React.ReactElement;\n\n  /**\n   * Which feel to display\n   *\n   * The options are as follows:\n   *\n   * - `\"raised\"` (default): A button with a border and a background\n   * - `\"flat\"`: No background or border\n   *\n   * @default \"raised\"\n   */\n  feel?: \"raised\" | \"flat\";\n\n  /**\n   * Either an icon to show to the left of the button text, or on it's own\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Show a loading spinner in place of the original icon on this button\n   *\n   * Automatically disables the button as well\n   */\n  loading?: boolean;\n\n  /**\n   * Size of the button\n   *\n   * The `default` option has been deprecated but will probably never be removed\n   * for reverse compatability.\n   *\n   * @default \"standard\"\n   */\n  size?: keyof typeof inputHeightDictionary | \"default\";\n\n  /**\n   * Theme to display the button. This can also be inferred from\n   * SpaceKitProvider.\n   *\n   * Different themes have different box-shadows. Right now we have these\n   * options, but this may expand in the future:\n   *\n   * - `\"light\"` (default)\n   * - `\"dark\"`\n   *\n   * @default \"light\"\n   */\n  theme?: \"light\" | \"dark\";\n\n  /**\n   * The type of the button\n   *\n   * This isn't included in HTMLAttributes but it's a very common property\n   * passed to a button, so we're including it here. If you pass `type` prop\n   * when using any element besides `<button>` you will get React warnings about\n   * passing unrecognized props to an element.\n   */\n  type?: \"button\" | \"submit\" | \"reset\" | undefined;\n\n  /**\n   * Button variants\n   *\n   * The options are as follows:\n   *\n   * - `undefined` (default): A button with text and an optional icon\n   * - `\"fab\"`: Floating action button\n   *\n   *   You must include an `icon` prop and you must _not_ include a `children`\n   *   prop for a floating action button.\n   *\n   *   _Note: this is not type checked; it will cause a runtime error_\n   */\n  variant?: \"fab\";\n}\n\n/**\n * Style system for Space Kit buttons\n *\n * This is intended to be used as an abstraction for your project's style guide.\n *\n * @see https://zpl.io/amdN6Pr\n */\nexport const Button = React.forwardRef<HTMLElement, Props>(\n  (\n    {\n      as = <button />,\n      children,\n      color = defaultColor,\n      variant,\n      endIcon,\n      feel = \"raised\",\n      icon: iconProp,\n      loading,\n      size = \"standard\",\n      theme: propTheme,\n      ...passthroughProps\n    },\n    ref,\n  ) => {\n    if (size === \"default\") {\n      size = \"standard\";\n    }\n    const { isFocusVisible, focusProps } = useFocusRing();\n    const { theme: providerTheme } = useSpaceKitProvider();\n    const theme = propTheme || providerTheme;\n\n    // Capture if the mouse is over the button by using `onPointerEnter` and\n    // `onPointerLeave`, which will still fire if the button is disabled. When\n    // we know the cursor is over the button, then override the button's\n    // `disabled` behavior to allow `Tooltip`s to work.\n    const [isPointerOver, setIsPointerOver] = useState(false);\n\n    const mergedProps = mergeProps(passthroughProps, as.props, focusProps, {\n      ref,\n    });\n\n    /**\n     * If the button is in a `loading` state, then always treat the button as\n     * disabled.\n     */\n    if (loading) {\n      mergedProps.disabled = true;\n    }\n\n    /**\n     * Flag indicating we're going to override the default disabled behavior to\n     * make an antecedent `Tooltip` work\n     */\n    const overrideDisabledBehavior: boolean =\n      useTooltipContext().descendsFromTooltip &&\n      isPointerOver &&\n      mergedProps.disabled;\n\n    /**\n     * Handler to avoid responding to click events for all attached listeners\n     * when `disabled`\n     */\n    const onClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      // If the button is disabled, then don't propogate `onClick`\n      // events.\n      if (mergedProps.disabled) return event.preventDefault();\n\n      mergedProps.onClick?.(event);\n    };\n\n    /**\n     * Styles to apply when button is disabled.\n     *\n     * We store this because we use this in multiple places to account for\n     * overriding the default disabled behavior.\n     */\n    const disabledStyles = {\n      backgroundColor:\n        feel === \"flat\"\n          ? \"transparent\"\n          : theme === \"light\"\n          ? colors.silver.light\n          : colors.grey.dark,\n      boxShadow: \"none\",\n      color:\n        feel === \"flat\" && theme === \"dark\"\n          ? colors.grey.dark\n          : colors.grey.light,\n    };\n\n    const focusedStyles: ObjectInterpolation<undefined> = {\n      ...(feel === \"flat\" && {\n        backgroundColor: theme === \"light\" ? colors.white : \"#000\",\n        color: theme === \"light\" ? colors.blue.base : colors.blue.light,\n      }),\n      // The `box-shadow` property is copied directly from Zeplin for the\n      // light theme. For the dark theme we use a variant of the color to\n      // make the borders sharp.\n      boxShadow: `0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px ${\n        theme === \"light\" || color === defaultColor || color === colors.white\n          ? \"#bbdbff\"\n          : getOffsetInPalette(Infinity, \"lighter\", color)\n      }, inset 0 0 0 1px ${\n        color === defaultColor || color === colors.white\n          ? \"#2075d6\"\n          : getOffsetInPalette(1, \"darker\", color)\n      }, inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)`,\n    };\n\n    const icon = loading ? (\n      <LoadingSpinner\n        size=\"2xsmall\"\n        theme={theme === \"light\" ? \"grayscale\" : \"dark\"}\n      />\n    ) : (\n      iconProp\n    );\n\n    /**\n     * Icon size in pixels\n     *\n     * This is stored so we can use the same value for `height` and `width`\n     */\n    const iconSize = size === \"small\" ? 12 : size === \"large\" ? 24 : 16;\n\n    const iconOnly = !children;\n\n    if (variant === \"fab\") {\n      if (!icon) {\n        throw new TypeError(\"FAB buttons are required to have an `icon`\");\n      } else if (children) {\n        throw new TypeError(\"FAB buttons cannot have children, only an `icon`\");\n      }\n    }\n\n    return (\n      <ClassNames>\n        {({ cx, css }) => {\n          const propsToPass = mergeProps(\n            // Omit `onClick` from `otherProps` beacuse we'll be conditionally\n            // calling it in the `onClick` handler depending on `mergedProps.disabled`.\n            // Also exclude `className` beacuse we'll be combining it on\n            // our own with `cx`. This is necessary because `cx` allows for\n            // emotion styles to be logically overwritten.\n            omit(\n              mergedProps,\n              \"className\",\n              \"onClick\",\n              // If we're overriding the default disabled behavior, then strip\n              // it out from the props we'll pass to the element.\n              overrideDisabledBehavior ? \"disabled\" : \"\",\n            ),\n            {\n              \"aria-disabled\": mergedProps.disabled,\n              onClick,\n              onPointerEnter() {\n                setIsPointerOver(true);\n              },\n              onPointerLeave() {\n                setIsPointerOver(false);\n              },\n              className: cx(\n                css([\n                  {\n                    \"&:focus\": {\n                      outline: 0,\n                    },\n                  },\n                  {\n                    backgroundColor:\n                      color === colors.white\n                        ? colors.white\n                        : feel === \"raised\"\n                        ? color\n                        : \"transparent\",\n\n                    borderRadius: variant === \"fab\" ? \"100%\" : 4,\n\n                    borderWidth: 0,\n                    ...(feel !== \"flat\" && {\n                      boxShadow:\n                        theme === \"light\"\n                          ? \"0 1px 4px 0 rgba(18, 21, 26, 0.04), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                          : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                    }),\n\n                    color: getTextColor({ color, feel, theme }),\n\n                    cursor: mergedProps.disabled ? \"default\" : \"pointer\",\n\n                    // Vertically center children\n                    display: \"inline-flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n\n                    height: getHeight({ size }),\n\n                    minWidth: iconOnly\n                      ? inputHeightDictionary[\n                          size === \"default\" ? \"standard\" : size\n                        ]\n                      : endIcon\n                      ? 0\n                      : size === \"small\"\n                      ? 76\n                      : size === \"default\" || size === \"standard\"\n                      ? 100\n                      : size === \"large\"\n                      ? 112\n                      : assertUnreachable(size),\n\n                    // We have to set the Y padding because browsers (at least Chrome) has\n                    // a non-symmetrical vertical padding applied by default.\n                    paddingLeft: iconOnly ? 0 : 12,\n                    paddingRight: iconOnly ? 0 : endIcon ? 8 : 12,\n\n                    ...(size === \"small\"\n                      ? base.small\n                      : size === \"large\"\n                      ? base.large\n                      : base.base),\n\n                    fontWeight: 600,\n\n                    // Disable the outline because we're setting a custom `:active` style\n                    outline: 0,\n\n                    textDecoration: \"none\",\n                    whiteSpace: \"nowrap\",\n                  },\n\n                  // We need to also set the `:hover` on `:disabled` so it has a\n                  // higher specificity than any `:hover` classes passed in. This\n                  // also means that both of these need to be overriden if we want\n                  // to use a custom disabled color.\n                  mergedProps.disabled\n                    ? overrideDisabledBehavior\n                      ? disabledStyles\n                      : { \"&[disabled], &[disabled]:hover\": disabledStyles }\n                    : {\n                        \":hover, &[data-force-hover-state]\": {\n                          backgroundColor: getHoverBackgroundColor({\n                            color,\n                            feel,\n                            theme,\n                          }),\n                          color: getTextColor({\n                            color,\n                            feel,\n                            theme,\n                            mode: \":hover\",\n                          }),\n                          ...(feel !== \"flat\" && {\n                            // The `box-shadow` property is copied directly from Zeplin\n                            boxShadow:\n                              theme === \"light\"\n                                ? \"0 5px 10px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                                : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 5px 10px 0 rgba(18, 21, 26, 0.12), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                          }),\n                        },\n                        // This is kind of hacky behavior\n                        \"&[data-force-focus-state]\": focusedStyles,\n                        \"&:active, &[data-force-active-state], &[aria-expanded=true]\": {\n                          ...(getTextColor({\n                            color,\n                            feel,\n                            theme,\n                            mode: \":hover\",\n                          }) && {\n                            color: getTextColor({\n                              color,\n                              feel,\n                              theme,\n                              mode: \":active\",\n                            }),\n                          }),\n\n                          backgroundColor:\n                            color === colors.white\n                              ? colors.white\n                              : feel === \"raised\"\n                              ? color\n                              : color === defaultColor\n                              ? theme === \"dark\"\n                                ? colors.grey.darker\n                                : colors.silver.base\n                              : getOffsetInPalette(2, \"lighter\", color),\n\n                          // The `box-shadow` properties are copied directly from Zeplin\n                          boxShadow:\n                            feel !== \"flat\"\n                              ? theme === \"light\"\n                                ? \"inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)\"\n                                : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 -1px 0 0 rgba(18, 21, 26, 0.16), inset 0 1px 2px 0 rgba(18, 21, 26, 0.42)\"\n                              : \"none\",\n                          outline: \"0\",\n                        },\n                      },\n                ]),\n                mergedProps.className,\n                isFocusVisible && css(focusedStyles),\n              ),\n\n              children: (\n                <>\n                  {icon && (\n                    <ButtonIcon\n                      iconSize={iconSize}\n                      className={css({ margin: iconOnly ? 0 : \"0 8px 0 0\" })}\n                    >\n                      {icon}\n                    </ButtonIcon>\n                  )}\n\n                  {children}\n                  {endIcon && !loading && (\n                    <ButtonIcon\n                      iconSize={iconSize}\n                      className={css({ margin: iconOnly ? 0 : `0 0 0 6px` })}\n                    >\n                      {endIcon}\n                    </ButtonIcon>\n                  )}\n                </>\n              ),\n            },\n          );\n\n          return React.cloneElement(as, propsToPass);\n        }}\n      </ClassNames>\n    );\n  },\n);\n"],"names":["defaultColor","colors","silver","light","getTextColor","_a","color","feel","theme","mode","white","grey","darker","tinycolor","mostReadable","getHoverBackgroundColor","level","size","toString","undefined","getOffsetInPalette","assertUnreachable","getHeight","dark","Infinity","Button","React","forwardRef","ref","_b","as","jsx","children","_c","variant","endIcon","_d","iconProp","loading","_e","propTheme","passthroughProps","_f","useFocusRing","isFocusVisible","focusProps","providerTheme","useSpaceKitProvider","_g","useState","isPointerOver","setIsPointerOver","mergedProps","mergeProps","props","disabled","overrideDisabledBehavior","useTooltipContext","descendsFromTooltip","onClick","event","preventDefault","disabledStyles","backgroundColor","boxShadow","focusedStyles","blue","base","icon","LoadingSpinner","iconSize","iconOnly","TypeError","ClassNames","cx","css","propsToPass","omit","onPointerEnter","onPointerLeave","className","outline","borderRadius","borderWidth","cursor","display","alignItems","justifyContent","height","minWidth","inputHeightDictionary","paddingLeft","paddingRight","fontWeight","textDecoration","whiteSpace","ButtonIcon","margin","cloneElement"],"mappings":"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"}