'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var colors = require('../colors/colors.js');
require('../assertUnreachable-698a501a.js');
var createElementFromAs = require('../createElementFromAs-30a442da.js');
var index = require('../index-8a508515.js');
var uniqueId = _interopDefault(require('lodash/uniqueId'));

var FeatureIntroControl = function (_a) {
  var _b = _a.imagePlacement,
      imagePlacement = _b === void 0 ? "left" : _b,
      width = _a.width,
      height = _a.height,
      className = _a.className,
      _c = _a.containerAs,
      containerAs = _c === void 0 ? "div" : _c,
      children = _a.children,
      props = _tslib.__rest(_a, ["imagePlacement", "width", "height", "className", "containerAs", "children"]);

  var featureIntroContext = index.useFeatureIntroControlInternalContext();
  var _d = [featureIntroContext === null || featureIntroContext === void 0 ? void 0 : featureIntroContext.heading, featureIntroContext === null || featureIntroContext === void 0 ? void 0 : featureIntroContext.content, featureIntroContext === null || featureIntroContext === void 0 ? void 0 : featureIntroContext.dismissButton, featureIntroContext === null || featureIntroContext === void 0 ? void 0 : featureIntroContext.learnMoreLink, featureIntroContext === null || featureIntroContext === void 0 ? void 0 : featureIntroContext.image],
      heading = _d[0],
      content = _d[1],
      dismissButton = _d[2],
      learnMoreLink = _d[3],
      image = _d[4];
  /**
   * Choose flex-direction based on imageDirection
   */

  var flexDirection = React.useMemo(function () {
    switch (imagePlacement) {
      case "bottom":
        return "column-reverse";

      case "top":
        return "column";

      case "right":
        return "row-reverse";

      default:
        // left
        return "row";
    }
  }, [imagePlacement]);
  /**
   * The width and height calculations for this component depend on whether or not there is an image,
   * and whether or not there was a prop passed for width & height.
   *
   * By default, if an image is added the width / height is doubled respectively
   * depending on whether the image direction is horizontal (left / right) or vertical(top / bottom)
   *
   * If a width or height is inputted, that height / width is not changed with an image
   **/

  var _e = React.useMemo(function () {
    var _a = [248, 180],
        baseWidth = _a[0],
        baseHeight = _a[1];
    var horizontalImage = image && (imagePlacement === "right" || imagePlacement === "left");
    var verticalImage = image && (imagePlacement === "top" || imagePlacement === "bottom");
    var defaultWidth = horizontalImage ? baseWidth * 2 : baseWidth;
    var defaultHeight = verticalImage ? baseHeight * 2 : baseHeight;
    return {
      finalWidth: width || defaultWidth,
      finalHeight: height || defaultHeight
    };
  }, [height, image, imagePlacement, width]),
      finalWidth = _e.finalWidth,
      finalHeight = _e.finalHeight;

  return core.jsx(core.ClassNames, null, function (_a) {
    var css = _a.css,
        cx = _a.cx;
    return /*#__PURE__*/React__default.cloneElement(createElementFromAs.createElementFromAs(containerAs), _tslib.__assign(_tslib.__assign({}, props), {
      className: cx(css({
        width: finalWidth,
        height: finalHeight
      }), className, /*#__PURE__*/React__default.isValidElement(containerAs) && containerAs.props.className),
      style: _tslib.__assign(_tslib.__assign({}, props.style), /*#__PURE__*/React__default.isValidElement(containerAs) && containerAs.props.style)
    }), core.jsx("div", {
      css: {
        backgroundColor: colors.colors.white,
        color: colors.colors.grey.darker,
        borderColor: colors.colors.white,
        borderRadius: 4,
        display: "flex",
        flexDirection: flexDirection,
        height: finalHeight
      }
    }, image, core.jsx("div", {
      css: {
        padding: 24,
        paddingBottom: 20,
        flexBasis: image ? "50%" : "auto"
      }
    }, core.jsx("div", {
      css: {
        paddingBottom: 12
      }
    }, heading), content, core.jsx("div", {
      css: css({
        display: "flex",
        justifyContent: "space-between"
      })
    }, learnMoreLink, dismissButton, children))));
  });
};

var FeatureIntroControlWrapper = function (props) {
  var _a;
  /**
   * Backup ID to be used if none are passed in props.
   *
   * Use `useMemo` so this is consistent for the lifecycle of this element.
   */


  var fallbackId = React.useMemo(function () {
    return uniqueId("space-kit-feature-intro-control-");
  }, []);
  var id = (_a = props.id) !== null && _a !== void 0 ? _a : fallbackId;
  return core.jsx(index.FeatureIntroControlContextProvider, {
    id: id
  }, core.jsx(FeatureIntroControl, _tslib.__assign({}, props, {
    id: id
  })));
};

exports.FeatureIntroControl = FeatureIntroControlWrapper;
//# sourceMappingURL=index.js.map
