'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
require('../fonts/fonts.js');
var base$1 = require('../base-91f9e1df.js');
require('../mono-a0d4bd30.js');
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-698a501a.js');
var IconInfoSolid = require('../icons/IconInfoSolid.js');
var IconWarningSolid = require('../icons/IconWarningSolid.js');
var IconErrorSolid = require('../icons/IconErrorSolid.js');
var IconSuccessSolid = require('../icons/IconSuccessSolid.js');
var index = require('../SpaceKitProvider/index.js');
var classnames = _interopDefault(require('classnames'));
var IconClose = require('../icons/IconClose.js');
require('../colors/utils/findPaletteByColor.js');
require('../colors/utils/getOffsetInPalette.js');
require('tinycolor2');
require('../Loaders/LoadingSpinner.js');
require('@react-aria/focus');
require('@react-aria/utils');
require('lodash/omit');
require('../Button/button/ButtonIcon.js');
require('../inputHeightDictionary-78849349.js');
require('../TooltipContext-20cc2d3d.js');
var Button = require('../Button/Button.js');

var AlertCard = function (_a) {
  var _b = _a.as,
      as = _b === void 0 ? "section" : _b,
      heading = _a.heading,
      onClose = _a.onClose,
      _c = _a.dismissable,
      dismissable = _c === void 0 ? true : _c,
      actions = _a.actions,
      _d = _a.headingAs,
      headingAs = _d === void 0 ? "h2" : _d,
      children = _a.children,
      propTheme = _a.theme,
      _e = _a.extended,
      extended = _e === void 0 ? false : _e,
      type = _a.type,
      otherProps = _tslib.__rest(_a, ["as", "heading", "onClose", "dismissable", "actions", "headingAs", "children", "theme", "extended", "type"]);

  var providerTheme = index.useSpaceKitProvider().theme;
  var theme = propTheme || providerTheme;

  var _f = React.useMemo(function () {
    switch (type) {
      case "info":
        return {
          color: colors.colors.blue,
          Icon: IconInfoSolid.IconInfoSolid
        };

      case "warn":
        return {
          color: colors.colors.orange,
          Icon: IconWarningSolid.IconWarningSolid
        };

      case "error":
        return {
          color: colors.colors.red,
          Icon: IconErrorSolid.IconErrorSolid
        };

      case "success":
        return {
          color: colors.colors.green,
          Icon: IconSuccessSolid.IconSuccessSolid
        };

      default:
        assertUnreachable.assertUnreachable(type);
    }
  }, [type]),
      Icon = _f.Icon,
      color = _f.color;

  return core.jsx(core.ClassNames, null, function (_a) {
    var css = _a.css,
        cx = _a.cx;
    return /*#__PURE__*/React__default.cloneElement( /*#__PURE__*/React__default.isValidElement(as) ? as : typeof as === "string" ? /*#__PURE__*/React__default.createElement(as) : assertUnreachable.assertUnreachable(as), _tslib.__assign(_tslib.__assign({}, otherProps), {
      className: cx(css({
        backgroundColor: theme === "light" ? colors.colors.white : theme === "dark" ? colors.colors.midnight.darker : assertUnreachable.assertUnreachable(theme),
        color: theme === "light" ? colors.colors.black.base : theme === "dark" ? colors.colors.white : assertUnreachable.assertUnreachable(theme),
        boxShadow: "0 4px 8px 0 rgba(0, 0, 0, .04)",
        borderStyle: "solid",
        borderRadius: 4,
        borderWidth: 1,
        borderColor: theme === "light" ? colors.colors.silver.dark : theme === "dark" ? colors.colors.midnight.dark : assertUnreachable.assertUnreachable(theme),
        padding: 15
      }), otherProps.className, /*#__PURE__*/React__default.isValidElement(as) && as.props.className)
    }), core.jsx(React__default.Fragment, null, core.jsx("div", {
      css: {
        marginBottom: extended ? 14 : 6,
        display: "flex"
      }
    }, core.jsx(core.ClassNames, null, function (_a) {
      var css = _a.css,
          cx = _a.cx;
      var headingProps = {
        className: cx(css(_tslib.__assign({
          fontWeight: 600,
          marginBottom: 0,
          marginTop: 0,
          width: "100%",
          display: "flex",
          color: theme === "light" ? color.darker : theme === "dark" ? color.lighter : assertUnreachable.assertUnreachable(theme)
        }, base$1.base))),
        children: core.jsx(React.Fragment, null, core.jsx(Icon, {
          css: {
            width: 20,
            height: 20,
            color: color.base,
            marginRight: 13,
            "& .inner": theme === "dark" && type !== "warn" && {
              fill: colors.colors.white
            }
          }
        }), heading)
      };
      return /*#__PURE__*/React__default.isValidElement(headingAs) ? /*#__PURE__*/React__default.cloneElement(headingAs, _tslib.__assign(_tslib.__assign({}, headingProps), {
        className: classnames(headingProps.className, headingAs.props.className)
      })) : /*#__PURE__*/React__default.createElement(headingAs, headingProps);
    }), dismissable && core.jsx(Button.Button, {
      onClick: onClose,
      size: "small",
      feel: "flat",
      theme: theme,
      css: {
        marginRight: -9,
        marginTop: -9,
        color: theme === "light" ? colors.colors.grey.lighter : colors.colors.midnight.lighter,
        ":hover": {
          backgroundColor: "transparent",
          color: theme === "light" ? colors.colors.grey.light : colors.colors.midnight.lightest
        }
      },
      color: {
        light: colors.colors.grey.lighter,
        dark: colors.colors.midnight.lighter
      }[theme],
      icon: core.jsx(IconClose.IconClose, {
        css: {
          width: 10,
          height: 10
        }
      })
    })), extended && core.jsx("hr", {
      css: {
        height: 1,
        borderWidth: 0,
        backgroundColor: theme === "light" ? colors.colors.silver.dark : theme === "dark" ? colors.colors.midnight.base : assertUnreachable.assertUnreachable(theme),
        marginTop: 14,
        marginBottom: 14
      }
    }), core.jsx("div", {
      css: {
        marginLeft: extended ? 0 : 33
      }
    }, core.jsx("div", {
      css: _tslib.__assign(_tslib.__assign({}, base$1.small), {
        marginBottom: actions ? 13 : 0
      })
    }, children), actions)));
  });
};
AlertCard.propTypes = {
  extended: PropTypes.bool,
  onClose: PropTypes.func.isRequired,
  children: PropTypes.node,
  heading: PropTypes.node.isRequired,
  actions: PropTypes.node,
  type: PropTypes.oneOf(["info", "warn", "error", "success"]).isRequired,
  headingAs: PropTypes.oneOfType([PropTypes.element.isRequired, PropTypes.string.isRequired])
};

exports.AlertCard = AlertCard;
//# sourceMappingURL=AlertCard.js.map
