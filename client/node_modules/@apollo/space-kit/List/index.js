'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-698a501a.js');
var index = require('../index-497a4b3b.js');
var verticalListMarginFromPadding = require('../verticalListMarginFromPadding-9f8e64e0.js');

/**
 * Indicates how much padding the default tooltip has
 *
 * This will be used to apply negative margins to elements.
 */

var listPadding = 6;
var List = /*#__PURE__*/React__default.forwardRef(function (_a, ref) {
  var children = _a.children,
      className = _a.className,
      style = _a.style,
      endIconAs = _a.endIconAs,
      hoverColor = _a.hoverColor,
      iconSize = _a.iconSize,
      margin = _a.margin,
      padding = _a.padding,
      selectedColor = _a.selectedColor,
      startIconAs = _a.startIconAs,
      truncate = _a.truncate,
      props = _tslib.__rest(_a, ["children", "className", "style", "endIconAs", "hoverColor", "iconSize", "margin", "padding", "selectedColor", "startIconAs", "truncate"]);
  /**
   * Combination of inherited configuration and new configuration passed via
   * props
   */


  var listConfig = _tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign({}, index.useListConfig()), typeof endIconAs !== "undefined" && {
    endIconAs: endIconAs
  }), typeof hoverColor !== "undefined" && {
    hoverColor: hoverColor
  }), typeof iconSize !== "undefined" && {
    iconSize: iconSize
  }), typeof margin !== "undefined" && {
    margin: margin
  }), typeof padding !== "undefined" && {
    padding: padding
  }), typeof selectedColor !== "undefined" && {
    selectedColor: selectedColor
  }), typeof startIconAs !== "undefined" && {
    startIconAs: startIconAs
  }), typeof truncate !== "undefined" && {
    truncate: truncate
  });

  var verticalMargin = -verticalListMarginFromPadding.verticalListMarginFromPadding(listConfig.padding) / 2 + (listConfig.margin === "none" ? -6 : listConfig.margin === "auto" ? 0 : assertUnreachable.assertUnreachable(listConfig.margin));
  var horizontalMargin = listConfig.margin === "none" ? -listPadding : listConfig.margin === "auto" ? 0 : assertUnreachable.assertUnreachable(listConfig.margin);
  return core.jsx(index.ListConfigProvider, _tslib.__assign({}, listConfig), core.jsx("div", _tslib.__assign({}, props, {
    ref: ref,
    className: className,
    style: style,
    css: core.css({
      marginTop: verticalMargin,
      marginBottom: verticalMargin,
      marginLeft: horizontalMargin,
      marginRight: horizontalMargin,
      outline: "none"
    })
  }), children));
});

exports.List = List;
exports.listPadding = listPadding;
//# sourceMappingURL=index.js.map
