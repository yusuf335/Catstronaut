{"version":3,"file":"TextField.js","sources":["../src/TextField/TextField.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { ClassNames, jsx } from \"@emotion/core\";\nimport React from \"react\";\nimport * as typography from \"../typography\";\nimport { colors } from \"../colors\";\nimport { IconWarningSolid } from \"../icons/IconWarningSolid\";\nimport { IconInfoSolid } from \"../icons/IconInfoSolid\";\nimport classnames from \"classnames\";\nimport { inputHeightDictionary } from \"../shared/inputHeightDictionary\";\ninterface FormControlProps {\n  as?: React.ReactElement | keyof JSX.IntrinsicElements;\n}\n\n/**\n * Component that wraps the outside of a form element and all it's contents\n */\nexport const FormControl: React.FC<FormControlProps> = ({\n  as = \"div\",\n  children,\n}) => {\n  return React.isValidElement(as)\n    ? React.cloneElement(as, undefined, children)\n    : React.createElement(as, undefined, children);\n};\n\ninterface InputLabelProps\n  extends React.DetailedHTMLProps<\n    React.LabelHTMLAttributes<HTMLLabelElement>,\n    HTMLLabelElement\n  > {\n  as?: React.ReactElement | keyof JSX.IntrinsicElements;\n}\n\nexport const InputLabel = React.forwardRef<HTMLLabelElement, InputLabelProps>(\n  ({ as = \"label\", children, ...props }, ref) => {\n    return (\n      <ClassNames>\n        {({ css, cx }) => {\n          const element = React.isValidElement(as)\n            ? as\n            : React.createElement(as);\n\n          return React.cloneElement(\n            element,\n            {\n              ...props,\n              className: cx(\n                css({\n                  paddingBottom: 8,\n                  ...typography.base.base,\n                  fontWeight: 600,\n                }),\n                element.props.className,\n              ),\n              ref,\n            },\n            children,\n          );\n        }}\n      </ClassNames>\n    );\n  },\n);\n\ninterface Props {\n  /**\n   * Passed through to the underlying `input`\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Class name that will be applied to the wrapping `div` around the component\n   */\n  className?: string;\n\n  /**\n   * Value an uncontrolled input will default to\n   */\n  defaultValue?: string;\n\n  /**\n   * Visible description\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Disable the input\n   */\n  disabled?: boolean;\n\n  /**\n   * Content to show in the event there is an error in the input. This will\n   * change the appearance of the input and will replace text passed via\n   * `helper`.\n   */\n  error?: React.ReactNode;\n\n  /**\n   * Extra information displayed below input. This will be replaced by `error` if it is passed\n   */\n  helper?: React.ReactNode;\n\n  /**\n   * Icon to have at the left of the input\n   */\n  icon?: React.ReactNode;\n\n  /**\n   * Override how the `input` is rendered. You can pass either an intrinisic jsx element as a string (like \"input\") or a react element (`<input />`)\n   *\n   * If you pass a react element, props that we add are spread onto the input.\n   *\n   * @default \"input\"\n   */\n  inputAs?: React.ReactElement | keyof JSX.IntrinsicElements;\n\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\n  /**\n   * Visible title\n   */\n  label?: React.ReactNode;\n\n  /**\n   * A short hint that describes the expected value of the input field\n   */\n  placeholder?: string;\n\n  /**\n   * Size of text and padding inside the input\n   *\n   * Defaults to `standard`\n   */\n  size?: keyof typeof inputHeightDictionary;\n\n  /**\n   * Whether or not to show the circle i icon to the left of helper text\n   *\n   * Defaults to `false`\n   */\n  showInfoIcon?: boolean;\n\n  /**\n   * Value of a controlled input\n   */\n  value?: string | number;\n\n  /**\n   * Name to give the input\n   */\n  name?: string;\n\n  /**\n   * Type of input field\n   */\n  type?: string;\n}\n\n/**\n * Emulates an `<input>` with the automatic layout of a label, description, helper\n * text, and error text.\n *\n * @deprecated Use `<FormControl inputAs={<Input />} />` instead.\n */\nexport const TextField: React.FC<Props> = ({\n  autoFocus,\n  className,\n  defaultValue,\n  description,\n  disabled,\n  error,\n  helper,\n  icon,\n  inputAs = \"input\",\n  label,\n  name,\n  onFocus,\n  onBlur,\n  onChange,\n  placeholder,\n  showInfoIcon,\n  size = \"standard\",\n  type,\n  value,\n}) => (\n  <ClassNames>\n    {({ css, cx }) => {\n      const inputProps = {\n        autoFocus,\n        defaultValue,\n        disabled,\n        name,\n        onFocus,\n        onBlur,\n        onChange,\n        placeholder,\n        type,\n        value,\n        className: cx(\n          css({\n            backgroundColor: disabled ? colors.silver.light : colors.white,\n            border: \"solid 1px\",\n            borderColor: error ? colors.red.base : colors.silver.darker,\n            \"::placeholder\": {\n              color: disabled ? colors.grey.lighter : colors.grey.light,\n              opacity: 1,\n            },\n            borderRadius: 4,\n            flex: 1,\n            height: inputHeightDictionary[size],\n            ...(size === \"small\"\n              ? typography.base.small\n              : typography.base.base),\n            marginRight: icon ? -30 : 0,\n            paddingLeft: icon ? 34 : size === \"small\" ? 8 : 12,\n            paddingRight: size === \"small\" ? 8 : 12,\n            width: \"100%\",\n            \":hover,  &[data-force-hover-state]\": {\n              borderColor:\n                !disabled && !error\n                  ? colors.grey.light\n                  : error\n                  ? colors.red.base\n                  : colors.silver.darker,\n            },\n            \":focus, &[data-force-focus-state]\": {\n              borderColor:\n                !disabled && !error\n                  ? colors.blue.light\n                  : error\n                  ? colors.red.base\n                  : colors.silver.darker,\n              outline: \"none\",\n            },\n          }),\n        ),\n      };\n\n      return (\n        <FormControl as={<div className={className} />}>\n          <InputLabel>\n            <React.Fragment>\n              {label != null && <div css={{ marginBottom: 4 }}>{label}</div>}\n              {description != null && (\n                <div\n                  css={{\n                    ...typography.base.base,\n                    color: colors.black.base,\n                  }}\n                >\n                  {description}\n                </div>\n              )}\n              <div\n                css={{\n                  marginTop: 8,\n                  position: \"relative\",\n                }}\n              >\n                {icon && (\n                  <div\n                    css={{\n                      position: \"absolute\",\n                      display: \"inline-flex\",\n                      left: 12,\n                      top: \"50%\",\n                      transform: \"translateY(-50%)\",\n                    }}\n                  >\n                    {icon}\n                  </div>\n                )}\n\n                {React.isValidElement(inputAs)\n                  ? React.cloneElement(inputAs, {\n                      ...inputProps,\n                      className: classnames(\n                        inputProps.className,\n                        inputAs.props.className,\n                      ),\n                    })\n                  : React.createElement(inputAs, inputProps)}\n              </div>\n            </React.Fragment>\n          </InputLabel>\n          <div\n            css={{\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            {(helper || error) && (\n              <div\n                css={{\n                  ...typography.base.small,\n                  color: error ? colors.red.base : colors.grey.base,\n                  display: \"flex\",\n                  marginRight: 8,\n                  marginTop: 8,\n                  paddingLeft: size === \"small\" ? 8 : 12,\n                }}\n              >\n                {error ? (\n                  <IconWarningSolid\n                    css={{\n                      height: 15,\n                      marginRight: 8,\n                      position: \"relative\",\n                      top: 2,\n                      width: 15,\n                    }}\n                  />\n                ) : showInfoIcon && helper ? (\n                  <IconInfoSolid\n                    css={{\n                      color: colors.blue.base,\n                      height: 15,\n                      marginRight: 8,\n                      position: \"relative\",\n                      top: 2,\n                      width: 15,\n                    }}\n                  />\n                ) : null}\n\n                <div>{error || helper}</div>\n              </div>\n            )}\n          </div>\n        </FormControl>\n      );\n    }}\n  </ClassNames>\n);\n"],"names":["FormControl","_a","_b","as","children","React","isValidElement","cloneElement","undefined","createElement","InputLabel","forwardRef","ref","props","jsx","ClassNames","css","cx","element","className","paddingBottom","typography","fontWeight","TextField","autoFocus","defaultValue","description","disabled","error","helper","icon","inputAs","label","name","onFocus","onBlur","onChange","placeholder","showInfoIcon","_c","size","type","value","inputProps","backgroundColor","colors","silver","light","white","border","borderColor","red","base","darker","color","grey","lighter","opacity","borderRadius","flex","height","inputHeightDictionary","marginRight","paddingLeft","paddingRight","width","blue","outline","Fragment","marginBottom","black","marginTop","position","display","left","top","transform","classnames","alignItems","IconWarningSolid","IconInfoSolid"],"mappings":"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"}