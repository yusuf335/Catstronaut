'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var index = require('./SpaceKitProvider/index.js');

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".tippy-box[data-animation=fade][data-state=hidden]{opacity:0}[data-tippy-root]{max-width:calc(100vw - 10px)}.tippy-box{position:relative;background-color:#333;color:#fff;border-radius:4px;font-size:14px;line-height:1.4;outline:0;transition-property:transform,visibility,opacity}.tippy-box[data-placement^=top]>.tippy-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-arrow:before{bottom:-7px;left:0;border-width:8px 8px 0;border-top-color:initial;transform-origin:center top}.tippy-box[data-placement^=bottom]>.tippy-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-arrow:before{top:-7px;left:0;border-width:0 8px 8px;border-bottom-color:initial;transform-origin:center bottom}.tippy-box[data-placement^=left]>.tippy-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-arrow:before{border-width:8px 0 8px 8px;border-left-color:initial;right:-7px;transform-origin:center left}.tippy-box[data-placement^=right]>.tippy-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-arrow:before{left:-7px;border-width:8px 8px 8px 0;border-right-color:initial;transform-origin:center right}.tippy-box[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-arrow{width:16px;height:16px;color:#333}.tippy-arrow:before{content:\"\";position:absolute;border-color:transparent;border-style:solid}.tippy-content{position:relative;padding:5px 9px;z-index:1}";
styleInject(css);

/**
 * Indicates that we have already warned the user of needing a
 * `SpaceKitProvider` once so we don't do it multiple times.
 */

var spaceKitProviderWarningIssued = false;
/**
 * Indicates that we have already warned the user of changing `children` on
 * re-renders
 */

var childrenChangedWarningIssued = false;
/**
 * Component used to communicate with SpaceKitProvider to ensure that instances
 * of this component rendered with the same `identity` will always result in a
 * single element in the DOM.
 *
 * If there is no SpaceKitProvider, print a warning and passthrough the
 * `children`
 *
 * This will assume that you don't actually care where the element is rendered
 * in the DOM.
 *
 * All changes to `children` will be ignored. A warning will be logged if
 * `children` changes. You should memoize `children` to avoid this warning.
 */

var SingletonComponent = function (_a) {
  var children = _a.children,
      identity = _a.identity;
  var hasSpaceKitProvider = index.useHasSpaceKitProvider();

  var _b = index.useSingletonComponent(),
      show = _b.show,
      hide = _b.hide;

  var initialChildren = React__default.useRef(children);
  React__default.useEffect(function () {
    show({
      identity: identity,
      element: initialChildren.current
    });
    return function () {
      hide({
        identity: identity
      });
    };
  }, [initialChildren, hide, identity, show]);

  if (!hasSpaceKitProvider && !spaceKitProviderWarningIssued) {
    // eslint-disable-next-line no-console
    console.warn("You must wrap your application with SpaceKitProvider to prevent repeated `<style />` tags being injected into the DOM.");
    spaceKitProviderWarningIssued = true;
  }

  if (children !== initialChildren.current && !childrenChangedWarningIssued) {
    // eslint-disable-next-line no-console
    console.error("All changes to `children` of `SingletonComponent` will be ignored. You should memoize the input.");
    childrenChangedWarningIssued = true;
  }

  initialChildren.current = children;
  return hasSpaceKitProvider ? null : children;
};

exports.SingletonComponent = SingletonComponent;
exports.styleInject = styleInject;
//# sourceMappingURL=SingletonComponent-7ca6baa8.js.map
