'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

/**
 * Context holding all configuration options for lists
 */

var FormControlContext = /*#__PURE__*/React.createContext(undefined);
var FormControlContextProvider = function (_a) {
  var children = _a.children,
      id = _a.id;

  var _b = React.useState(),
      endAdornment = _b[0],
      setEndAdornment = _b[1];

  var _c = React.useState(),
      description = _c[0],
      setDescription = _c[1];

  var _d = React.useState(),
      errorMessageElement = _d[0],
      setErrorMessageElement = _d[1];

  var _e = React.useState(),
      helper = _e[0],
      setHelper = _e[1];

  var _f = React.useState(),
      label = _f[0],
      setLabel = _f[1];

  var _g = React.useState(),
      startAdornment = _g[0],
      setStartAdornment = _g[1];

  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {
    value: {
      id: id,
      labelId: id && id + "-label",
      descriptionId: id && id + "-description",
      feedbackId: id && id + "-feedback",
      helperTextId: id && id + "-helptext",
      description: description,
      setDescription: setDescription,
      errorMessageElement: errorMessageElement,
      setErrorMessageElement: setErrorMessageElement,
      endAdornment: endAdornment,
      setEndAdornment: setEndAdornment,
      helper: helper,
      setHelper: setHelper,
      label: label,
      setLabel: setLabel,
      startAdornment: startAdornment,
      setStartAdornment: setStartAdornment
    }
  }, children);
};
/**
 * Internal hook to access form control context
 */

function useFormControlInternalContext() {
  var _a = React.useContext(FormControlContext) || {},
      id = _a.id,
      description = _a.description,
      setDescription = _a.setDescription,
      errorMessageElement = _a.errorMessageElement,
      setErrorMessageElement = _a.setErrorMessageElement,
      endAdornment = _a.endAdornment,
      setEndAdornment = _a.setEndAdornment,
      setStartAdornment = _a.setStartAdornment,
      startAdornment = _a.startAdornment,
      setHelper = _a.setHelper,
      helper = _a.helper,
      label = _a.label,
      setLabel = _a.setLabel,
      labelId = _a.labelId,
      descriptionId = _a.descriptionId,
      feedbackId = _a.feedbackId,
      helperTextId = _a.helperTextId;

  return React.useMemo(function () {
    return {
      id: id,
      description: description,
      setDescription: setDescription,
      errorMessageElement: errorMessageElement,
      setErrorMessageElement: setErrorMessageElement,
      endAdornment: endAdornment,
      setEndAdornment: setEndAdornment,
      setStartAdornment: setStartAdornment,
      startAdornment: startAdornment,
      setHelper: setHelper,
      helper: helper,
      label: label,
      setLabel: setLabel,
      labelId: labelId,
      descriptionId: descriptionId,
      feedbackId: feedbackId,
      helperTextId: helperTextId
    };
  }, [id, description, setDescription, errorMessageElement, setErrorMessageElement, endAdornment, setEndAdornment, setStartAdornment, startAdornment, setHelper, helper, label, setLabel, labelId, descriptionId, feedbackId, helperTextId]);
}
/**
 * Hook intended to provide `FormControl` props to form components
 */

function useFormControlContext() {
  var _a = useFormControlInternalContext(),
      description = _a.description,
      descriptionId = _a.descriptionId,
      endAdornment = _a.endAdornment,
      errorMessageElement = _a.errorMessageElement,
      feedbackId = _a.feedbackId,
      helper = _a.helper,
      helperTextId = _a.helperTextId,
      id = _a.id,
      labelId = _a.labelId,
      startAdornment = _a.startAdornment;

  return React.useMemo(function () {
    return {
      describedBy: [!!description && descriptionId, !!errorMessageElement && feedbackId, !errorMessageElement && helper && helperTextId].filter(function (text) {
        return !!text;
      }).join(" ") || undefined,
      endAdornment: endAdornment,
      hasError: !!errorMessageElement,
      id: id,
      labelledBy: labelId || undefined,
      startAdornment: startAdornment
    };
  }, [description, descriptionId, endAdornment, errorMessageElement, feedbackId, helper, helperTextId, id, labelId, startAdornment]);
}

exports.FormControlContextProvider = FormControlContextProvider;
exports.useFormControlContext = useFormControlContext;
exports.useFormControlInternalContext = useFormControlInternalContext;
//# sourceMappingURL=index-14c98598.js.map
