'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var colors = require('../colors/colors.js');
var index = require('../SpaceKitProvider/index.js');

var LoadingSpinner = /*#__PURE__*/React__default.forwardRef(function (_a, ref) {
  var propTheme = _a.theme,
      _b = _a.size,
      size = _b === void 0 ? "medium" : _b,
      className = _a.className,
      props = _tslib.__rest(_a, ["theme", "size", "className"]);

  var providerTheme = index.useSpaceKitProvider().theme;
  var theme = propTheme || providerTheme;
  /* Length of animation */

  var DURATION = 1000;
  var SPIN = core.keyframes(templateObject_1 || (templateObject_1 = _tslib.__makeTemplateObject(["\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  "], ["\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  "])));
  var SIZE_MAP = {
    large: 90,
    medium: 64,
    small: 48,
    xsmall: 32,
    "2xsmall": 16
  };
  var THEME_MAP = {
    light: {
      orbitColor: colors.colors.silver.base,
      orbitOpacity: 1,
      asteroidColor: colors.colors.blue.base
    },
    dark: {
      orbitColor: colors.colors.white,
      orbitOpacity: 0.5,
      asteroidColor: colors.colors.white
    },
    grayscale: {
      orbitColor: colors.colors.silver.darker,
      orbitOpacity: 1,
      asteroidColor: colors.colors.grey.light
    }
  };
  var disableAnimations = index.useSpaceKitProvider().disableAnimations;
  var _c = THEME_MAP[theme],
      orbitColor = _c.orbitColor,
      orbitOpacity = _c.orbitOpacity,
      asteroidColor = _c.asteroidColor;
  var pixelSize = SIZE_MAP[size];
  var mountTime = React__default.useRef(Date.now());
  var mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);
  return core.jsx("svg", _tslib.__assign({
    className: className,
    ref: ref,
    role: "progressbar",
    viewBox: "0 0 100 100",
    css: {
      width: pixelSize,
      height: pixelSize
    }
  }, props), core.jsx("circle", {
    strokeWidth: "8",
    stroke: orbitColor,
    strokeOpacity: orbitOpacity,
    fill: "transparent",
    r: "41",
    cx: "50",
    cy: "50"
  }), core.jsx("g", {
    transform: "translate(50 50)"
  }, core.jsx("circle", {
    css: {
      animation: SPIN + " " + DURATION + "ms linear infinite",
      willChange: "transform",
      animationDelay: mountDelay + "ms"
    },
    fill: asteroidColor,
    r: "10",
    cx: "40",
    cy: "0"
  })));
});
var templateObject_1;

exports.LoadingSpinner = LoadingSpinner;
//# sourceMappingURL=LoadingSpinner.js.map
