{"version":3,"file":"sizeModifier.js","sources":["../../src/Popover/popover/sizeModifier.ts"],"sourcesContent":["import computeAutoPlacement from \"@popperjs/core/lib/utils/computeAutoPlacement\";\nimport detectOverflow from \"@popperjs/core/lib/utils/detectOverflow\";\nimport getOppositePlacement from \"@popperjs/core/lib/utils/getOppositePlacement\";\nimport getOppositeVariationPlacement from \"@popperjs/core/lib/utils/getOppositeVariationPlacement\";\nimport {\n  BasePlacement,\n  Boundary,\n  Modifier,\n  ModifierArguments,\n  Padding,\n  Placement,\n  Rect,\n  RootBoundary,\n} from \"@popperjs/core\";\n\ninterface Options {\n  allowedAutoPlacements: Array<Placement>;\n  altBoundary: boolean;\n  boundary: Boundary;\n  fallbackPlacements: Array<Placement>;\n  flipVariations: boolean;\n  padding: Padding;\n  rootBoundary: RootBoundary;\n}\n\n/**\n * Get the base of a `Placement`, meaning strip off `-start` and `-end`\n *\n * This will also work with `auto`, which is why this is modified from the\n * internal popper version\n */\nfunction getBasePlacement(\n  placement: Placement | \"auto\",\n): BasePlacement | \"auto\" {\n  return (placement.split(\"-\")[0] as any) as BasePlacement | \"auto\";\n}\n\nfunction getExpandedFallbackPlacements(placement: Placement): Array<Placement> {\n  if (getBasePlacement(placement) === \"auto\") {\n    return [];\n  }\n\n  const oppositePlacement = getOppositePlacement(placement);\n\n  return [\n    getOppositeVariationPlacement(placement),\n    oppositePlacement,\n    getOppositeVariationPlacement(oppositePlacement),\n  ];\n}\n\n/**\n * Find the placement with the minimum vertical overflow. If there is a tie\n * between placements, the first placement wins.\n */\nfunction findPlacementWithMinimumVerticalOverflow({\n  placementOverflows,\n  popperRect,\n  preventOverflow = { x: 0, y: 0 },\n}: {\n  placementOverflows: {\n    placement: Placement;\n    overflow: ReturnType<typeof detectOverflow>;\n  }[];\n  popperRect: Rect;\n  preventOverflow?: { x: number; y: number };\n}) {\n  const { height } = popperRect;\n  const { y } = preventOverflow;\n\n  const placementCalculations = placementOverflows.map(\n    ({ placement, overflow }) => {\n      const verticalOverflow =\n        overflow[getBasePlacement(placement) === \"top\" ? \"top\" : \"bottom\"];\n\n      return {\n        placement,\n        overflowPixels: Math.max(0, verticalOverflow),\n        // The `overflow` can be negative here; this is how the container can\n        // expand when we are resizing to expose more of the clipped content.\n        maxHeight: height - verticalOverflow - y,\n      };\n    },\n  );\n\n  // Sort `placementCalculations` by which placement has the least overflow\n  // pixels. If there is a tie, use the preferred placement.\n  placementCalculations.sort((a, b) => {\n    if (b.overflowPixels !== a.overflowPixels) {\n      return a.overflowPixels - b.overflowPixels;\n    }\n\n    // If the heights are the same then we have no overflow in these two\n    // placements. We must prioritize the user-specified placement order here.\n    // While `overflowed` is already in the correct order, preserving original\n    // sort order is explicitly stated to not be stable in the\n    // [`Array.prototype.sort`\n    // spec](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.sort)\n    //\n    // We could build an index for the indicies, but I don't think we'll have\n    // any performance issues because the placement lists are short.\n    const aPlacementWeight = placementOverflows.findIndex(\n      (overflow) => overflow.placement === a.placement,\n    );\n    const bPlacementWeight = placementOverflows.findIndex(\n      (overflow) => overflow.placement === b.placement,\n    );\n\n    return aPlacementWeight - bPlacementWeight;\n  });\n\n  return placementCalculations[0];\n}\n\n/**\n * Generate a list of `Placement`s given the modifier options\n */\nfunction buildPlacementsList({\n  state,\n  options,\n}: ModifierArguments<Options>): readonly Placement[] {\n  /**\n   * Preferred placement\n   *\n   * Taken from options\n   */\n  const preferredPlacement = state.options.placement;\n\n  /**\n   * Base placement from `preferredPlacement`\n   */\n  const basePlacement = getBasePlacement(preferredPlacement);\n\n  /**\n   * Represents if the `preferredPlacement` is a `BasePlacement` (meaning it has\n   * no `-begin` or `-end`)\n   */\n  const isBasePlacement = basePlacement === preferredPlacement;\n\n  /**\n   * List of fallback placements\n   *\n   * Either passed in with `specifiedFallbackPlacements`, or calculated\n   * depending on\n   * [`flipVariations`](https://popper.js.org/docs/v2/modifiers/flip/#flipvariations)\n   *\n   * Copied verbatim from popper's flip modifier source; @see\n   * https://github.com/popperjs/popper-core/blob/de867743d4b841af88675691064c8271452e150f/src/modifiers/flip.js#L55-L59\n   */\n  const fallbackPlacements =\n    options.fallbackPlacements ||\n    (isBasePlacement || !options.flipVariations\n      ? [getOppositePlacement(preferredPlacement)]\n      : getExpandedFallbackPlacements(preferredPlacement));\n\n  /**\n   * Aggregate of all placements, including preferred and fallbacks.\n   *\n   * This is copied verbatim from the popper's flip modifier source; @see\n   * https://github.com/popperjs/popper-core/blob/de867743d4b841af88675691064c8271452e150f/src/modifiers/flip.js#L61-L77\n   */\n  return [preferredPlacement, ...fallbackPlacements].reduce<Placement[]>(\n    (acc, placement) => {\n      return acc.concat(\n        getBasePlacement(placement) === \"auto\"\n          ? computeAutoPlacement(state, {\n              ...options,\n              placement,\n            } as any)\n          : placement,\n      );\n    },\n    [],\n  );\n}\n\n/**\n * Calculate the placement and max size\n */\nfunction getPlacementAndMaxSize(\n  modifierArguments: ModifierArguments<Options>,\n): {\n  placement: Placement;\n  maxSize: { height: number };\n} {\n  const { state, options } = modifierArguments;\n  const placements = buildPlacementsList(modifierArguments);\n\n  /**\n   * Array calculated from `placements` with the calculated values of each\n   * `placement`. This will be used to determine if we're capable of flipping\n   * the element to display it or of we have to set the `max-height` too.\n   */\n  const placementOverflows = placements.map((placement) => ({\n    placement,\n    overflow: detectOverflow(state, {\n      ...options,\n      placement,\n    }),\n  }));\n\n  const minimumOverflowPlacement = findPlacementWithMinimumVerticalOverflow({\n    placementOverflows,\n    popperRect: state.rects.popper,\n    preventOverflow: state.modifiersData.preventOverflow,\n  });\n\n  return {\n    placement: minimumOverflowPlacement.placement,\n    maxSize: {\n      height: minimumOverflowPlacement.maxHeight,\n    },\n  };\n}\n\n/**\n * Popper [modifier](https://popper.js.org/docs/v2/modifiers/) based on popper's\n * built-in [flip]() modifier and the community\n * [`maxSize`](https://www.npmjs.com/package/popper-max-size-modifier). Neither\n * of those fit our needs because the `flip` modifier can't make an element\n * scrollable and the max size modifier only sets the max size, it doesn't try\n * to figure out the best position to use with a max size.\n *\n * This combines the logic of those two to create a modifier that will behave\n * exactly like `flip`, but if there are no placements that can display the\n * element in it's entirety, it'll find the placement that can show the most\n * content with a max-height.\n */\nexport const sizeModifier: Modifier<\"maxSize\", Options> = {\n  name: \"maxSize\",\n  enabled: true,\n  phase: \"main\",\n  requiresIfExists: [\"offset\", \"preventOverflow\", \"flip\"],\n  // `_skip` is a custom property we use internally to prevent us from flipping\n  // more than once in a single tick.\n  data: { _skip: false },\n  fn: (modifierArguments) => {\n    const { placement, maxSize } = getPlacementAndMaxSize(modifierArguments);\n\n    // Set the max height to be written in the `write` phase. See\n    // https://www.npmjs.com/package/popper-max-size-modifier and\n    // https://codesandbox.io/s/great-tesla-3roz7 for prior art\n    modifierArguments.state.modifiersData[modifierArguments.name] = {\n      height: maxSize.height,\n    };\n\n    // If the placement has changed and we haven't already changed the\n    // placement, then change it.\n    if (\n      modifierArguments.state.placement !== placement &&\n      !modifierArguments.state.modifiersData[modifierArguments.name]._skip\n    ) {\n      modifierArguments.state.modifiersData[\n        modifierArguments.name\n      ]._skip = true;\n      modifierArguments.state.placement = placement;\n      // If we're applying a new position, then all other modifiers need to be\n      // completely re-run, which is what setting `state.reset = true` does.\n      // @see https://popper.js.org/docs/v2/modifiers/#fn\n      modifierArguments.state.reset = true;\n    }\n  },\n};\n"],"names":["getBasePlacement","placement","split","getExpandedFallbackPlacements","oppositePlacement","getOppositePlacement","getOppositeVariationPlacement","findPlacementWithMinimumVerticalOverflow","_a","placementOverflows","popperRect","_b","preventOverflow","x","y","height","placementCalculations","map","overflow","verticalOverflow","overflowPixels","Math","max","maxHeight","sort","a","b","aPlacementWeight","findIndex","bPlacementWeight","buildPlacementsList","state","options","preferredPlacement","basePlacement","isBasePlacement","fallbackPlacements","flipVariations","__spreadArrays","reduce","acc","concat","computeAutoPlacement","__assign","getPlacementAndMaxSize","modifierArguments","placements","detectOverflow","minimumOverflowPlacement","rects","popper","modifiersData","maxSize","sizeModifier","name","enabled","phase","requiresIfExists","data","_skip","fn","reset"],"mappings":"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"}