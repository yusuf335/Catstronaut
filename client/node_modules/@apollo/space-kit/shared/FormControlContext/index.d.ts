import * as React from "react";
/**
 * These items are expected to be passed to the context provider
 */
interface FormControlContextConfig {
    id?: string;
}
interface FormControl extends FormControlContextConfig {
    description: React.ReactNode | undefined;
    setDescription: React.Dispatch<React.SetStateAction<FormControl["description"]>> | undefined;
    errorMessageElement: React.ReactNode | undefined;
    setErrorMessageElement: React.Dispatch<React.SetStateAction<FormControl["errorMessageElement"]>> | undefined;
    endAdornment: React.ReactNode | undefined;
    setEndAdornment: React.Dispatch<React.SetStateAction<FormControl["endAdornment"]>> | undefined;
    helper: React.ReactNode | undefined;
    setHelper: React.Dispatch<React.SetStateAction<FormControl["helper"]>> | undefined;
    label: React.ReactNode | undefined;
    setLabel: React.Dispatch<React.SetStateAction<FormControl["label"]>> | undefined;
    startAdornment: React.ReactNode | undefined;
    setStartAdornment: React.Dispatch<React.SetStateAction<FormControl["startAdornment"]>> | undefined;
    labelId: string | undefined;
    descriptionId: string | undefined;
    feedbackId: string | undefined;
    helperTextId: string | undefined;
}
export declare const FormControlContextProvider: React.FC<FormControlContextConfig>;
/**
 * Internal hook to access form control context
 */
export declare function useFormControlInternalContext(): FormControl;
/**
 * Hook intended to provide `FormControl` props to form components
 */
export declare function useFormControlContext(): {
    describedBy: string | undefined;
    hasError: boolean;
    labelledBy: string | undefined;
} & Pick<FormControl, "endAdornment" | "id" | "startAdornment">;
export {};
