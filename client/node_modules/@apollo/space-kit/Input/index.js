'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../fonts/fonts.js');
var base$1 = require('../base-91f9e1df.js');
require('../mono-a0d4bd30.js');
var colors = require('../colors/colors.js');
require('../assertUnreachable-698a501a.js');
var inputHeightDictionary = require('../inputHeightDictionary-78849349.js');
require('../createElementFromAs-30a442da.js');
require('lodash/uniqueId');
var index = require('../index-14c98598.js');
require('../FormControl/index.js');

/**
 * Component that decorates an `input`
 *
 * `className` and `style` are not available on the props because it would not
 * be obvious where those props would be added in the DOM. To add a `className`
 * to either the containing `div` or the underlying `input`, you must use
 * `containerAs` and `inputAs`.
 */

var Input = /*#__PURE__*/React__default.forwardRef(function (_a, ref) {
  var _b = _a.size,
      size = _b === void 0 ? "standard" : _b,
      _c = _a.type,
      type = _c === void 0 ? "text" : _c,
      props = _tslib.__rest(_a, ["size", "type"]);

  var _d = index.useFormControlContext(),
      describedBy = _d.describedBy,
      endAdornment = _d.endAdornment,
      labelledBy = _d.labelledBy,
      hasError = _d.hasError,
      id = _d.id,
      startAdornment = _d.startAdornment;

  return core.jsx("input", _tslib.__assign({
    ref: ref,
    id: id,
    "aria-labelledby": labelledBy,
    "aria-describedby": describedBy,
    "aria-invalid": hasError || undefined,
    type: type
  }, props, {
    css: core.css(_tslib.__assign(_tslib.__assign({
      backgroundColor: props.disabled ? colors.colors.silver.light : colors.colors.white,
      border: "solid 1px",
      borderColor: hasError ? colors.colors.red.base : colors.colors.silver.darker,
      "::placeholder": {
        color: props.disabled ? colors.colors.grey.lighter : colors.colors.grey.light,
        opacity: 1
      },
      borderRadius: 4,
      flex: 1,
      height: inputHeightDictionary.inputHeightDictionary[size]
    }, size === "small" ? base$1.small : base$1.base), {
      paddingLeft: startAdornment ? 34 : size === "small" ? 8 : 10,
      paddingRight: endAdornment ? 34 : size === "small" ? 8 : 10,
      width: "100%",
      ":hover,  &[data-force-hover-state]": {
        borderColor: !props.disabled ? colors.colors.grey.light : hasError ? colors.colors.red.base : colors.colors.silver.darker
      },
      ":focus, &[data-force-focus-state]": {
        borderColor: !props.disabled ? colors.colors.blue.light : hasError ? colors.colors.red.base : colors.colors.silver.darker,
        outline: "none"
      }
    }))
  }));
});

exports.Input = Input;
//# sourceMappingURL=index.js.map
