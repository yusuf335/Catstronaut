{"version":3,"file":"index.js","sources":["../src/FormLabel/index.tsx"],"sourcesContent":["/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport * as React from \"react\";\nimport * as typography from \"../typography\";\nimport { css, jsx } from \"@emotion/core\";\nimport { useFormControlInternalContext } from \"../shared/FormControlContext\";\nimport { colors } from \"../colors\";\n\ninterface Props\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.LabelHTMLAttributes<HTMLLabelElement>,\n      HTMLLabelElement\n    >,\n    \"aria-invalid\" | \"className\" | \"style\" | \"id\" | \"htmlFor\"\n  > {\n  children: React.ReactNode;\n  required?: boolean;\n}\n\n/**\n * Component to render a form label.\n *\n * If this component is rendered in the children of `FormControl`, then\n * `FormControl` will render this element in it's layout. Otherwise, it's\n * rendered as-is.\n */\nexport const FormLabel: React.FC<Props> = ({\n  \"aria-invalid\": ariaInvalid,\n  children,\n  required,\n  className,\n  htmlFor,\n  id,\n  style,\n}) => {\n  const {\n    errorMessageElement,\n    setLabel,\n    labelId,\n    id: inputId,\n    description,\n  } = useFormControlInternalContext();\n\n  const element = React.useMemo(\n    () => (\n      <label\n        aria-invalid={ariaInvalid ?? (errorMessageElement ? true : undefined)}\n        id={id ?? labelId}\n        htmlFor={htmlFor ?? inputId}\n        style={style}\n        className={className}\n        css={css({\n          ...typography.base.base,\n          display: \"inline-block\",\n          marginBottom: description ? 4 : 0,\n          fontWeight: 600,\n        })}\n      >\n        {children}\n        {required && <span css={{ color: colors.red.base }}>*</span>}\n      </label>\n    ),\n    [\n      ariaInvalid,\n      children,\n      className,\n      description,\n      errorMessageElement,\n      htmlFor,\n      required,\n      id,\n      inputId,\n      labelId,\n      style,\n    ],\n  );\n\n  React.useLayoutEffect(() => {\n    setLabel?.(element);\n\n    return () => setLabel?.(null);\n  }, [element, setLabel]);\n\n  return setLabel ? null : element;\n};\n"],"names":["FormLabel","_a","ariaInvalid","children","required","className","htmlFor","id","style","_b","useFormControlInternalContext","errorMessageElement","setLabel","labelId","inputId","description","element","React","jsx","undefined","css","typography","display","marginBottom","fontWeight","color","colors","red","base"],"mappings":";;;;;;;;;;;;;;;;AAoBA;;;;;;;;AAOA,IAAaA,SAAS,GAAoB,UAACC,EAAD;MACxBC,WAAW;MAC3BC,QAAQ;MACRC,QAAQ;MACRC,SAAS;MACTC,OAAO;MACPC,EAAE;MACFC,KAAK;;MAECC,KAMFC,mCAA6B,EAN3B;MACJC,mBAAmB,yBADf;MAEJC,QAAQ,cAFJ;MAGJC,OAAO,aAHH;MAIAC,OAAO,QAJP;MAKJC,WAAW,iBALP;;MAQAC,OAAO,GAAGC,aAAA,CACd;WACEC;sBACgBhB,WAAW,SAAX,IAAAA,WAAW,WAAX,GAAAA,WAAA,GAAgBS,mBAAmB,GAAG,IAAH,GAAUQ;MAC3DZ,EAAE,EAAEA,EAAE,SAAF,IAAAA,EAAE,WAAF,GAAAA,EAAA,GAAMM;MACVP,OAAO,EAAEA,OAAO,SAAP,IAAAA,OAAO,WAAP,GAAAA,OAAA,GAAWQ;MACpBN,KAAK,EAAEA;MACPH,SAAS,EAAEA;MACXe,GAAG,EAAEA,QAAG,qCACHC;QACHC,OAAO,EAAE;QACTC,YAAY,EAAER,WAAW,GAAG,CAAH,GAAO;QAChCS,UAAU,EAAE;QAJN;OAOPrB,UACAC,QAAQ,IAAIc;MAAME,GAAG,EAAE;QAAEK,KAAK,EAAEC,aAAM,CAACC,GAAP,CAAWC;;YAf1C;GADQ,EAmBd,CACE1B,WADF,EAEEC,QAFF,EAGEE,SAHF,EAIEU,WAJF,EAKEJ,mBALF,EAMEL,OANF,EAOEF,QAPF,EAQEG,EARF,EASEO,OATF,EAUED,OAVF,EAWEL,KAXF,CAnBc,CAAhB;EAkCAS,qBAAA,CAAsB;IACpBL,QAAQ,SAAR,IAAAA,QAAQ,WAAR,SAAA,GAAAA,QAAQ,CAAGI,OAAH,CAAR;WAEO;aAAMJ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,SAAA,GAAAA,QAAQ,CAAG,IAAH;KAArB;GAHF,EAIG,CAACI,OAAD,EAAUJ,QAAV,CAJH;SAMOA,QAAQ,GAAG,IAAH,GAAUI,OAAzB;CAzDK;;;;"}