'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../fonts/fonts.js');
var base$1 = require('../base-91f9e1df.js');
require('../mono-a0d4bd30.js');
var colors = require('../colors/colors.js');
var index = require('../index-14c98598.js');

/**
 * Component to render a form label.
 *
 * If this component is rendered in the children of `FormControl`, then
 * `FormControl` will render this element in it's layout. Otherwise, it's
 * rendered as-is.
 */

var FormLabel = function (_a) {
  var ariaInvalid = _a["aria-invalid"],
      children = _a.children,
      required = _a.required,
      className = _a.className,
      htmlFor = _a.htmlFor,
      id = _a.id,
      style = _a.style;

  var _b = index.useFormControlInternalContext(),
      errorMessageElement = _b.errorMessageElement,
      setLabel = _b.setLabel,
      labelId = _b.labelId,
      inputId = _b.id,
      description = _b.description;

  var element = React.useMemo(function () {
    return core.jsx("label", {
      "aria-invalid": ariaInvalid !== null && ariaInvalid !== void 0 ? ariaInvalid : errorMessageElement ? true : undefined,
      id: id !== null && id !== void 0 ? id : labelId,
      htmlFor: htmlFor !== null && htmlFor !== void 0 ? htmlFor : inputId,
      style: style,
      className: className,
      css: core.css(_tslib.__assign(_tslib.__assign({}, base$1.base), {
        display: "inline-block",
        marginBottom: description ? 4 : 0,
        fontWeight: 600
      }))
    }, children, required && core.jsx("span", {
      css: {
        color: colors.colors.red.base
      }
    }, "*"));
  }, [ariaInvalid, children, className, description, errorMessageElement, htmlFor, required, id, inputId, labelId, style]);
  React.useLayoutEffect(function () {
    setLabel === null || setLabel === void 0 ? void 0 : setLabel(element);
    return function () {
      return setLabel === null || setLabel === void 0 ? void 0 : setLabel(null);
    };
  }, [element, setLabel]);
  return setLabel ? null : element;
};

exports.FormLabel = FormLabel;
//# sourceMappingURL=index.js.map
