'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../assertUnreachable-698a501a.js');
var createElementFromAs = require('../createElementFromAs-30a442da.js');
var uniqueId = _interopDefault(require('lodash/uniqueId'));
var index = require('../index-14c98598.js');

var FormControl = function (_a) {
  var children = _a.children,
      className = _a.className,
      _b = _a.containerAs,
      containerAs = _b === void 0 ? "div" : _b,
      _c = _a.contentSectionAs,
      contentSectionAs = _c === void 0 ? "section" : _c,
      id = _a.id,
      _d = _a.labelSectionAs,
      labelSectionAs = _d === void 0 ? "section" : _d,
      _e = _a.layout,
      layout = _e === void 0 ? "vertical" : _e,
      props = _tslib.__rest(_a, ["children", "className", "containerAs", "contentSectionAs", "id", "labelSectionAs", "layout"]);

  var _f = index.useFormControlInternalContext(),
      description = _f.description,
      descriptionId = _f.descriptionId,
      endAdornment = _f.endAdornment,
      errorMessageElement = _f.errorMessageElement,
      helper = _f.helper,
      label = _f.label,
      labelId = _f.labelId,
      startAdornment = _f.startAdornment;
  /**
   * Take a map keyed for each possible value of `layout` and return the value
   * corresponding to the current `layout`
   */


  function layoutValue(map) {
    return map[layout];
  }

  return core.jsx(core.ClassNames, null, function (_a) {
    var css = _a.css,
        cx = _a.cx;
    return /*#__PURE__*/React__default.cloneElement(createElementFromAs.createElementFromAs(containerAs), _tslib.__assign(_tslib.__assign({}, props), {
      className: cx(css({
        alignItems: layoutValue({
          vertical: "initial",
          horizontal: "center"
        }),
        display: "flex",
        flexDirection: layoutValue({
          vertical: "column",
          horizontal: "row"
        })
      }), className, /*#__PURE__*/React__default.isValidElement(containerAs) && containerAs.props.className),
      style: _tslib.__assign(_tslib.__assign({}, props.style), /*#__PURE__*/React__default.isValidElement(containerAs) && containerAs.props.style)
    }), core.jsx(React__default.Fragment, null, (label || description) && /*#__PURE__*/React__default.cloneElement(createElementFromAs.createElementFromAs(labelSectionAs), {
      className: cx(css({
        flex: layoutValue({
          vertical: undefined,
          horizontal: 1
        }),
        marginBottom: layoutValue({
          vertical: 8,
          horizontal: 0
        }),
        marginRight: layoutValue({
          vertical: undefined,
          horizontal: 8
        })
      }), /*#__PURE__*/React__default.isValidElement(labelSectionAs) && labelSectionAs.props.className)
    }, core.jsx(React__default.Fragment, null, /*#__PURE__*/React__default.isValidElement(label) && /*#__PURE__*/React__default.cloneElement(label, _tslib.__assign(_tslib.__assign({}, label.props), {
      id: labelId,
      htmlFor: id
    })), /*#__PURE__*/React__default.isValidElement(description) && /*#__PURE__*/React__default.cloneElement(description, _tslib.__assign(_tslib.__assign({}, description.props), {
      id: descriptionId
    })))), /*#__PURE__*/React__default.cloneElement(createElementFromAs.createElementFromAs(contentSectionAs), {
      className: cx(css({
        flex: layoutValue({
          vertical: undefined,
          horizontal: 1
        })
      }), /*#__PURE__*/React__default.isValidElement(contentSectionAs) && contentSectionAs.props.className)
    }, core.jsx(React__default.Fragment, null, core.jsx("div", {
      className: css({
        position: "relative"
      })
    }, startAdornment, children, endAdornment), (helper || errorMessageElement) && core.jsx("div", {
      css: {
        marginRight: 8,
        marginTop: 8,
        paddingLeft: 12
      }
    }, errorMessageElement || helper)))));
  });
};

var FormControlWrapper = function (props) {
  var _a;
  /**
   * Backup ID to be used if none are passed in props.
   *
   * Use `useMemo` so this is consistent for the lifecycle of this element.
   */


  var fallbackId = React__default.useMemo(function () {
    return uniqueId("space-kit-form-control-");
  }, []);
  var id = (_a = props.id) !== null && _a !== void 0 ? _a : fallbackId;
  return core.jsx(index.FormControlContextProvider, {
    id: id
  }, core.jsx(FormControl, _tslib.__assign({}, props, {
    id: id
  })));
};

exports.useFormControlContext = index.useFormControlContext;
exports.FormControl = FormControlWrapper;
//# sourceMappingURL=index.js.map
