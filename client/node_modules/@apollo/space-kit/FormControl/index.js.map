{"version":3,"file":"index.js","sources":["../src/FormControl/index.tsx"],"sourcesContent":["/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport { ClassNames, jsx } from \"@emotion/core\";\nimport React from \"react\";\nimport { As, createElementFromAs } from \"../shared/createElementFromAs\";\nimport {\n  FormControlContextProvider,\n  useFormControlInternalContext,\n} from \"../shared/FormControlContext\";\nimport uniqueId from \"lodash/uniqueId\";\n\nexport { useFormControlContext } from \"../shared/FormControlContext\";\n\ninterface Props\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.HTMLAttributes<HTMLDivElement>,\n      HTMLDivElement\n    >,\n    \"className\" | \"style\"\n  > {\n  /**\n   * Override how the outermost container is rendered.\n   *\n   * @default \"div\"\n   */\n  containerAs?: As;\n\n  /**\n   * Override how the content section is rendered. This contains the input and\n   * helper/error text.\n   *\n   * This is useful if you want to change the default size of the content versus\n   * label sections.\n   *\n   * @default \"section\"\n   */\n  contentSectionAs?: As;\n\n  /**\n   * This ID will be used to tie all components together with accessibility\n   */\n  id?: string;\n\n  /**\n   * Override how the label section is rendered. This contains the label and\n   * description.\n   *\n   * This is useful if you want to change the default size of the content versus\n   * label sections.\n   *\n   * @default \"section\"\n   */\n  labelSectionAs?: As;\n\n  /**\n   * How to lay out the form element\n   */\n  layout?: \"vertical\" | \"horizontal\";\n}\n\nconst FormControl: React.FC<Props> = ({\n  children,\n  className,\n  containerAs = \"div\",\n  contentSectionAs = \"section\",\n  id,\n  labelSectionAs = \"section\",\n  layout = \"vertical\",\n  ...props\n}) => {\n  const {\n    description,\n    descriptionId,\n    endAdornment,\n    errorMessageElement,\n    helper,\n    label,\n    labelId,\n    startAdornment,\n  } = useFormControlInternalContext();\n\n  /**\n   * Take a map keyed for each possible value of `layout` and return the value\n   * corresponding to the current `layout`\n   */\n  function layoutValue<T>(map: Record<typeof layout, T>): T {\n    return map[layout];\n  }\n\n  return (\n    <ClassNames>\n      {({ css, cx }) => {\n        return React.cloneElement(\n          createElementFromAs(containerAs),\n          {\n            ...props,\n            className: cx(\n              css({\n                alignItems: layoutValue({\n                  vertical: \"initial\",\n                  horizontal: \"center\",\n                } as const),\n                display: \"flex\",\n                flexDirection: layoutValue({\n                  vertical: \"column\",\n                  horizontal: \"row\",\n                } as const),\n              }),\n              className,\n              React.isValidElement(containerAs) && containerAs.props.className,\n            ),\n            style: {\n              ...props.style,\n              ...(React.isValidElement(containerAs) && containerAs.props.style),\n            },\n          },\n          <>\n            {(label || description) &&\n              React.cloneElement(\n                createElementFromAs(labelSectionAs),\n                {\n                  className: cx(\n                    css({\n                      flex: layoutValue({\n                        vertical: undefined,\n                        horizontal: 1,\n                      } as const),\n                      marginBottom: layoutValue({\n                        vertical: 8,\n                        horizontal: 0,\n                      } as const),\n                      marginRight: layoutValue({\n                        vertical: undefined,\n                        horizontal: 8,\n                      } as const),\n                    }),\n                    React.isValidElement(labelSectionAs) &&\n                      labelSectionAs.props.className,\n                  ),\n                },\n                <>\n                  {React.isValidElement<any>(label) &&\n                    React.cloneElement(label, {\n                      ...label.props,\n                      id: labelId,\n                      htmlFor: id,\n                    })}\n                  {React.isValidElement<any>(description) &&\n                    React.cloneElement(description, {\n                      ...description.props,\n                      id: descriptionId,\n                    })}\n                </>,\n              )}\n\n            {React.cloneElement(\n              createElementFromAs(contentSectionAs),\n              {\n                className: cx(\n                  css({\n                    flex: layoutValue({\n                      vertical: undefined,\n                      horizontal: 1,\n                    } as const),\n                  }),\n                  React.isValidElement(contentSectionAs) &&\n                    contentSectionAs.props.className,\n                ),\n              },\n              <>\n                <div className={css({ position: \"relative\" })}>\n                  {startAdornment}\n                  {children}\n                  {endAdornment}\n                </div>\n                {(helper || errorMessageElement) && (\n                  <div\n                    css={{\n                      marginRight: 8,\n                      marginTop: 8,\n                      paddingLeft: 12,\n                    }}\n                  >\n                    {errorMessageElement || helper}\n                  </div>\n                )}\n              </>,\n            )}\n          </>,\n        );\n      }}\n    </ClassNames>\n  );\n};\n\nconst FormControlWrapper: React.FC<React.ComponentProps<typeof FormControl>> = (\n  props,\n) => {\n  /**\n   * Backup ID to be used if none are passed in props.\n   *\n   * Use `useMemo` so this is consistent for the lifecycle of this element.\n   */\n  const fallbackId = React.useMemo(\n    () => uniqueId(\"space-kit-form-control-\"),\n    [],\n  );\n  const id = props.id ?? fallbackId;\n\n  return (\n    <FormControlContextProvider id={id}>\n      <FormControl {...props} id={id} />\n    </FormControlContextProvider>\n  );\n};\n\nexport { FormControlWrapper as FormControl };\n"],"names":["FormControl","_a","children","className","_b","containerAs","_c","contentSectionAs","id","_d","labelSectionAs","_e","layout","props","_f","useFormControlInternalContext","description","descriptionId","endAdornment","errorMessageElement","helper","label","labelId","startAdornment","layoutValue","map","jsx","ClassNames","css","cx","React","cloneElement","createElementFromAs","alignItems","vertical","horizontal","display","flexDirection","isValidElement","style","flex","undefined","marginBottom","marginRight","htmlFor","position","marginTop","paddingLeft","FormControlWrapper","fallbackId","useMemo","uniqueId","FormControlContextProvider"],"mappings":"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"}