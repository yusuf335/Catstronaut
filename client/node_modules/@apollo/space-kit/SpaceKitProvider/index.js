'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var React = require('react');
var React__default = _interopDefault(React);

var defaultState = {
  disableAnimations: false,
  singletonComponents: {},
  theme: "light"
}; // This implementation is based on the excellent blog post by Kent C. Dodds on
// How to use React Context effectively:
// https://kentcdodds.com/blog/how-to-use-react-context-effectively

var SpaceKitStateContext = /*#__PURE__*/React__default.createContext(undefined);
var SpaceKitSetContext = /*#__PURE__*/React__default.createContext(undefined);
/**
 * Provider to set options on all Space Kit components
 *
 * This is completely optional; components will not have issues if this is
 * missing from the context.
 *
 * A good place to use this would be in your storybook configuration as a
 * decorator applied to all components if we're running inside of chromatic.
 */

var SpaceKitProvider = function (_a) {
  var _b;

  var children = _a.children,
      theme = _a.theme,
      disableAnimations = _a.disableAnimations;
  var nextState = React.useMemo(function () {
    return {
      theme: theme !== null && theme !== void 0 ? theme : defaultState.theme,
      disableAnimations: disableAnimations !== null && disableAnimations !== void 0 ? disableAnimations : defaultState.disableAnimations,
      singletonComponents: {}
    };
  }, [theme, disableAnimations]);

  var _c = React__default.useState(nextState),
      state = _c[0],
      setState = _c[1];

  React.useEffect(function () {
    setState(function (currState) {
      return _tslib.__assign(_tslib.__assign({}, nextState), {
        singletonComponents: currState.singletonComponents
      });
    });
  }, [nextState]);
  return /*#__PURE__*/React__default.createElement(SpaceKitStateContext.Provider, {
    value: state
  }, /*#__PURE__*/React__default.createElement(SpaceKitSetContext.Provider, {
    value: setState
  }, Object.entries((_b = state === null || state === void 0 ? void 0 : state.singletonComponents) !== null && _b !== void 0 ? _b : {}).map(function (_a) {
    var identity = _a[0],
        element = _a[1].element;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: identity
    }, element);
  }), children));
};
/**
 * Hook to indicate if the current component is being rendered inside of a
 * `SpaceKitProvider`
 */

function useHasSpaceKitProvider() {
  return !!React__default.useContext(SpaceKitStateContext);
}
/**
 * Hook to get the values from the Space Kit Provider with sensible defaults for
 * all the values.
 *
 * This component does _not_ require us to be wrapped with `SpaceKitProvider`
 */

function useSpaceKitProvider() {
  var context = React__default.useContext(SpaceKitStateContext);

  if (context == null) {
    // Provide a default because consumers are not required to wrap their
    // components with our providers
    return defaultState;
  }

  return context;
}
/**
 * Hook intended to be used internally to communicate with `SpaceKitProvider`
 * indicating singleton components being mounted and unmounted.
 *
 * Use `show` to track when you show a component.
 *
 * Use `hide` to track when you remove a component.
 */

function useSingletonComponent() {
  var setSpaceKitContext = React__default.useContext(SpaceKitSetContext);
  var hide = React__default.useCallback(function (_a) {
    var identity = _a.identity;
    setSpaceKitContext === null || setSpaceKitContext === void 0 ? void 0 : setSpaceKitContext(function (state) {
      if (state === void 0) {
        state = defaultState;
      }

      if (!state.singletonComponents[identity]) {
        // This should never happen; we should never be trying to decrement
        // something that isn't rendered.
        return state;
      }

      if (state.singletonComponents[identity].instanceCount.current === 1) {
        // This is the last instance; delete it from the component and return
        // a new state to trigger a re-render.
        var singletonComponentsCopy = _tslib.__assign({}, state.singletonComponents);

        delete singletonComponentsCopy[identity];
        return _tslib.__assign(_tslib.__assign({}, state), {
          singletonComponents: singletonComponentsCopy
        });
      } // Decrement the instance count and return the original `state` so this
      // won't trigger a re-render.


      state.singletonComponents[identity].instanceCount.current -= 1;
      return state;
    });
  }, [setSpaceKitContext]);
  var show = React__default.useCallback(function (_a) {
    var identity = _a.identity,
        element = _a.element;
    setSpaceKitContext === null || setSpaceKitContext === void 0 ? void 0 : setSpaceKitContext(function (previousState) {
      var _a;

      if (previousState === void 0) {
        previousState = defaultState;
      }

      if (!previousState.singletonComponents[identity]) {
        // This is the first time ths identity is being rendered. Create the
        // entry in `singletonComponents` and modify `state` to trigger a
        // re-render.
        return _tslib.__assign(_tslib.__assign({}, previousState), {
          singletonComponents: _tslib.__assign(_tslib.__assign({}, previousState.singletonComponents), (_a = {}, _a[identity] = {
            element: element,
            instanceCount: {
              current: 1
            }
          }, _a))
        });
      } // This identity exists. Increment the instanceCount and return the
      // original state to avoid a re-render.


      previousState.singletonComponents[identity].instanceCount.current += 1;
      return previousState;
    });
  }, [setSpaceKitContext]);
  return {
    hide: hide,
    show: show
  };
}

exports.SpaceKitProvider = SpaceKitProvider;
exports.useHasSpaceKitProvider = useHasSpaceKitProvider;
exports.useSingletonComponent = useSingletonComponent;
exports.useSpaceKitProvider = useSpaceKitProvider;
//# sourceMappingURL=index.js.map
