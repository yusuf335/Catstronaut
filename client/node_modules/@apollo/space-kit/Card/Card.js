'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
require('../fonts/fonts.js');
var base$1 = require('../base-91f9e1df.js');
require('../mono-a0d4bd30.js');
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-698a501a.js');
var index = require('../SpaceKitProvider/index.js');
var classnames = _interopDefault(require('classnames'));

var descriptionMaxWidth = 760;
var Card = function (_a) {
  var children = _a.children,
      heading = _a.heading,
      actions = _a.actions,
      description = _a.description,
      _b = _a.headingAs,
      headingAs = _b === void 0 ? "h2" : _b,
      size = _a.size,
      propTheme = _a.theme,
      otherProps = _tslib.__rest(_a, ["children", "heading", "actions", "description", "headingAs", "size", "theme"]);

  var providerTheme = index.useSpaceKitProvider().theme;
  var theme = propTheme || providerTheme;
  return core.jsx("section", _tslib.__assign({}, otherProps, {
    css: {
      backgroundColor: theme === "light" ? colors.colors.white : theme === "dark" ? colors.colors.midnight.darker : assertUnreachable.assertUnreachable(theme),
      color: theme === "light" ? colors.colors.black.base : theme === "dark" ? colors.colors.white : assertUnreachable.assertUnreachable(theme),
      boxShadow: "0 1px 3px 0 rgba(0,0,0,.06)",
      borderStyle: "solid",
      borderRadius: 8,
      borderWidth: 1,
      borderColor: theme === "light" ? colors.colors.silver.dark : theme === "dark" ? colors.colors.midnight.dark : assertUnreachable.assertUnreachable(theme),
      paddingLeft: 24,
      paddingRight: 24,
      paddingTop: size === "large" ? 16 : 28,
      paddingBottom: size === "large" ? 16 : 28
    }
  }), core.jsx("div", {
    css: {
      display: "flex",
      marginBottom: (heading || description) && React__default.Children.toArray(children).some(Boolean) ? 24 : 0
    }
  }, core.jsx("div", {
    css: {
      flex: "1 1 0%",
      marginRight: "auto",
      overflow: "hidden"
    }
  }, core.jsx("div", null, heading && core.jsx(core.ClassNames, null, function (_a) {
    var css = _a.css,
        cx = _a.cx;
    var headingProps = {
      className: cx(css(_tslib.__assign({
        color: theme === "light" ? colors.colors.black.base : theme === "dark" ? colors.colors.white : assertUnreachable.assertUnreachable(theme),
        display: "flex",
        fontWeight: 600,
        marginBottom: 0,
        marginTop: 0
      }, size === "large" ? base$1.xlarge : base$1.large))),
      children: heading
    };
    return /*#__PURE__*/React__default.isValidElement(headingAs) ? /*#__PURE__*/React__default.cloneElement(headingAs, _tslib.__assign(_tslib.__assign({}, headingProps), {
      className: classnames(headingProps.className, headingAs.props.className)
    })) : /*#__PURE__*/React__default.createElement(headingAs, headingProps);
  }), description && core.jsx("div", {
    css: _tslib.__assign(_tslib.__assign({}, base$1.base), {
      color: theme === "light" ? colors.colors.grey.base : theme === "dark" ? colors.colors.midnight.lighter : assertUnreachable.assertUnreachable(theme),
      maxWidth: actions ? descriptionMaxWidth : ""
    })
  }, description))), actions && core.jsx("div", {
    css: {
      marginLeft: 16
    }
  }, actions)), children);
};
Card.propTypes = {
  children: PropTypes.node,
  heading: PropTypes.node,
  description: PropTypes.node,
  actions: PropTypes.node,
  size: PropTypes.oneOf(["standard", "large"])
};
var CardSection = function (_a) {
  var heading = _a.heading,
      description = _a.description,
      actions = _a.actions,
      propTheme = _a.theme;
  var providerTheme = index.useSpaceKitProvider().theme;
  var theme = propTheme || providerTheme;
  return core.jsx("section", {
    css: {
      display: "flex",
      marginTop: 24
    }
  }, core.jsx("div", {
    css: {
      flex: "1 1 0%",
      marginRight: "auto"
    }
  }, core.jsx("div", null, heading && core.jsx("div", {
    css: _tslib.__assign({
      display: "flex",
      color: theme === "light" ? colors.colors.black.base : theme === "dark" ? colors.colors.white : assertUnreachable.assertUnreachable(theme)
    }, base$1.base)
  }, core.jsx("span", {
    css: {
      fontWeight: 600,
      flex: "1 1 0%",
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      paddingRight: 24
    }
  }, heading)), description && core.jsx("div", {
    css: _tslib.__assign(_tslib.__assign({}, base$1.base), {
      color: theme === "light" ? colors.colors.grey.base : theme === "dark" ? colors.colors.midnight.lighter : assertUnreachable.assertUnreachable(theme),
      maxWidth: actions ? descriptionMaxWidth : ""
    })
  }, description))), actions && core.jsx("div", {
    css: {
      marginLeft: 16
    }
  }, actions));
};
CardSection.propTypes = {
  heading: PropTypes.node,
  description: PropTypes.node,
  actions: PropTypes.node
};
/**
 * A border line that can go between two card sections, with appropriate margin applied
 */

var CardSeperator = function (_a) {
  var propTheme = _a.theme;
  var providerTheme = index.useSpaceKitProvider().theme;
  var theme = propTheme || providerTheme;
  return core.jsx("hr", {
    css: {
      height: 1,
      borderWidth: 0,
      backgroundColor: theme === "light" ? colors.colors.silver.dark : theme === "dark" ? colors.colors.midnight.dark : assertUnreachable.assertUnreachable(theme),
      marginTop: 24,
      marginBottom: 24
    }
  });
};

exports.Card = Card;
exports.CardSection = CardSection;
exports.CardSeperator = CardSeperator;
//# sourceMappingURL=Card.js.map
