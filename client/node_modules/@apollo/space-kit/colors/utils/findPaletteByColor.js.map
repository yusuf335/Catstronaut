{"version":3,"file":"findPaletteByColor.js","sources":["../../src/colors/utils/findPaletteByColor.ts"],"sourcesContent":["import { colors, ColorPalette, MonochromePalette, ShadedColor } from \"../index\";\n\nexport function findPaletteByColor(\n  searchColor: ShadedColor,\n): MonochromePalette | ColorPalette {\n  const result = Object.values(colors)\n    .filter((color) => typeof color !== \"string\")\n    .find(\n      // We need to declare the result of the `filter` function's callback to\n      // tell TypeScript we are narrowing the type. By default,\n      // `Array.prototype.filter` has the same return type as it's given as an\n      // input; we're explicitly doing something different here.\n      // @see https://github.com/Microsoft/TypeScript/issues/7657#issuecomment-228697078\n      (color) => {\n        return Object.values(color).includes(searchColor);\n      },\n    );\n\n  if (!result) {\n    throw new Error(\"Could not find color in palette\");\n  }\n\n  // We know that the interface conforms to one of these, but we can't infer\n  // this because we defined all the palettes `as const` so we can restrict\n  // input to only values in those palettes.\n  return result as MonochromePalette | ColorPalette;\n}\n"],"names":["findPaletteByColor","searchColor","result","Object","values","colors","filter","color","find","includes","Error"],"mappings":";;;;;;SAEgBA,mBACdC;MAEMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcC,aAAd,EACZC,MADY,CACL,UAACC,KAAD;WAAW,OAAOA,KAAP,KAAiB,QAAjB;GADN,EAEZC,IAFY;;;;;YAQVD,KAAD;WACSJ,MAAM,CAACC,MAAP,CAAcG,KAAd,EAAqBE,QAArB,CAA8BR,WAA9B,CAAP;GATS,CAAf;;MAaI,CAACC,MAAL,EAAa;UACL,IAAIQ,KAAJ,CAAU,iCAAV,CAAN;;;;;;SAMKR,MAAP;;;;;"}