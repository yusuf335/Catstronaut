{"version":3,"file":"index.js","sources":["../src/shared/cloneElements.tsx","../src/ListItem/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { ClassNames } from \"@emotion/core\";\n\n/**\n * Clone elements in order. All `className`, `style`, and `css` props will be\n * propogated and merged. The leftmost `ref` will be maintained.\n */\nexport const cloneElements = (\n  ...elements: readonly React.ReactElement[]\n): React.ReactElement => {\n  return (\n    <ClassNames>\n      {({ css, cx }) => {\n        if (elements.length === 1) return elements[0];\n        return elements.reduce((accumulator, element) => {\n          return React.cloneElement(accumulator, {\n            ...element.props,\n            className: cx(\n              element.props.className,\n              accumulator.props.className,\n              // If the parent component is using emotion with the jsx pragma, we\n              // have to get fancy and intercept the styles to use with the\n              // `ClassNames` wrapper.\n              accumulator.props.css ? css(accumulator.props.css.styles) : null,\n            ),\n            style: { ...element.props.style, ...accumulator.props.style },\n            // Since we're cloning `as` with the `original` props added, we're\n            // going to lose the `ref`. We have to grab it from the\n            // `React.ReactElement` instance\n            ref: (accumulator as any).ref ?? (element as any).ref,\n          });\n        });\n      }}\n    </ClassNames>\n  );\n};\n","import type { Property } from \"csstype\";\nimport React from \"react\";\nimport { ClassNames } from \"@emotion/core\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\nimport tinycolor from \"tinycolor2\";\nimport { colors } from \"../colors\";\nimport { useListConfig } from \"../ListConfig\";\nimport { verticalListMarginFromPadding } from \"../shared/verticalListMarginFromPadding\";\nimport { cloneElements } from \"../shared/cloneElements\";\n\nfunction getIconHorizontalPadding(\n  iconSize: NonNullable<ReturnType<typeof useListConfig>[\"iconSize\"]>,\n): Property.Padding<number> {\n  switch (iconSize) {\n    case \"large\":\n      return 16;\n    case \"normal\":\n      return 12;\n    case \"small\":\n      return 8;\n    default:\n      assertUnreachable(iconSize);\n  }\n}\n\nfunction getIconSize(\n  iconSize: NonNullable<ReturnType<typeof useListConfig>[\"iconSize\"]>,\n): Property.Width<number> {\n  switch (iconSize) {\n    case \"large\":\n      return 18;\n    case \"normal\":\n      return 16;\n    case \"small\":\n      return 10;\n    default:\n      assertUnreachable(iconSize);\n  }\n}\n\nfunction getIconMarginLeft(\n  iconSize: NonNullable<ReturnType<typeof useListConfig>[\"iconSize\"]>,\n): Property.MarginLeft<number> {\n  switch (iconSize) {\n    case \"large\":\n    case \"normal\":\n      return \"initial\";\n    case \"small\":\n      return -7;\n    default:\n      assertUnreachable(iconSize);\n  }\n}\n\ninterface Props\n  extends Pick<\n      React.DetailedHTMLProps<\n        React.HTMLAttributes<HTMLDivElement>,\n        HTMLDivElement\n      >,\n      \"className\" | \"onClick\" | \"style\" | \"role\"\n    >,\n    Partial<\n      Pick<ReturnType<typeof useListConfig>, \"endIconAs\" | \"startIconAs\">\n    > {\n  /**\n   * Override the the default element used to render\n   *\n   * All props provided will be merged with props that this component adds,\n   * including `className`s being merged.\n   *\n   * @default <div />\n   */\n  as?: React.ReactElement;\n\n  /** Icon to display at the end of a list item.\n   *\n   * This element will always be rendered unless the value is `undefined`. If\n   * you want an empty node, a spacer for example, use `null`\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Indicates that the `ListItem` is being highlighted\n   */\n  highlighted?: boolean;\n\n  /**\n   * Indicates if this list item can be itneracted with. Defaults to `true`. If\n   * set to `false`, there will be no hover effects.\n   *\n   * This is _not_ the same as `disabled`\n   */\n  interactive?: boolean;\n  selected?: boolean;\n  /** Icon to display at the start of a list item.\n   *\n   * This element will always be rendered unless the value is `undefined`. If\n   * you want an empty node, a spacer for example, use `null`\n   */\n  startIcon?: React.ReactNode;\n}\n\nexport const ListItem = React.forwardRef<\n  HTMLDivElement,\n  React.PropsWithChildren<Props>\n>(\n  (\n    {\n      as = <div />,\n      children,\n      endIcon,\n      endIconAs: endIconAsProp,\n      highlighted = false,\n      interactive = true,\n      selected = false,\n      startIcon,\n      startIconAs: startIconAsProp,\n      ...props\n    },\n    ref,\n  ) => {\n    const {\n      hoverColor,\n      iconSize,\n      margin,\n      padding,\n      selectedColor,\n      truncate,\n      ...listConfig\n    } = useListConfig();\n\n    const endIconAs = endIconAsProp ?? listConfig.endIconAs;\n    const startIconAs = startIconAsProp ?? listConfig.startIconAs;\n\n    const selectedTextColor = tinycolor\n      .mostReadable(selectedColor, [colors.white, colors.grey.darker], {\n        level: \"AA\",\n        size: \"small\",\n      })\n      .toString();\n    const selectedBackgroundColor = selectedColor;\n\n    const selectedStyles = interactive && {\n      backgroundColor: selectedBackgroundColor,\n      color: selectedTextColor,\n    };\n\n    const highlightedStyles = hoverColor &&\n      interactive && {\n        backgroundColor: hoverColor,\n        color: tinycolor\n          .mostReadable(hoverColor, [colors.white, colors.grey.darker], {\n            level: \"AA\",\n            size: \"small\",\n          })\n          .toString(),\n      };\n\n    const verticalMargin = verticalListMarginFromPadding(padding) / 2;\n\n    return (\n      <ClassNames>\n        {({ css, cx }) =>\n          cloneElements(\n            as,\n            <div\n              {...props}\n              className={cx(\n                css({\n                  ...(selected && selectedStyles),\n                  ...{ \"&[aria-expanded=true]\": selectedStyles },\n                  ...(!selected && {\n                    \"&:hover, &[data-force-hover-state]\": highlightedStyles,\n                  }),\n                  ...(highlighted && !selected && highlightedStyles),\n                  alignItems: \"center\",\n                  cursor: interactive ? \"pointer\" : undefined,\n                  borderRadius:\n                    margin === \"auto\"\n                      ? 4\n                      : margin === \"none\"\n                      ? 0\n                      : assertUnreachable(margin),\n                  display: \"flex\",\n                  height: !truncate\n                    ? \"auto\"\n                    : padding === \"normal\"\n                    ? 28\n                    : padding === \"relaxed\"\n                    ? 40\n                    : assertUnreachable(padding),\n                  paddingLeft:\n                    12 +\n                    (margin === \"none\"\n                      ? 6\n                      : margin === \"auto\"\n                      ? 0\n                      : assertUnreachable(margin)),\n                  paddingRight:\n                    12 +\n                    (margin === \"none\"\n                      ? 6\n                      : margin === \"auto\"\n                      ? 0\n                      : assertUnreachable(margin)),\n                  paddingTop: 4,\n                  paddingBottom: 4,\n                  marginTop: verticalMargin,\n                  marginBottom: verticalMargin,\n                }),\n\n                props.className,\n              )}\n              ref={ref}\n            >\n              {typeof startIcon !== \"undefined\" &&\n                cloneElements(\n                  startIconAs,\n                  <div\n                    className={cx(\n                      css({\n                        alignSelf: \"center\",\n                        display: \"flex\",\n                        flex: \"none\",\n                        marginLeft: getIconMarginLeft(iconSize),\n                        marginRight: getIconHorizontalPadding(iconSize),\n                        overflow: \"hidden\",\n                        whiteSpace: \"nowrap\",\n                        width: getIconSize(iconSize),\n                      }),\n                    )}\n                  >\n                    {startIcon}\n                  </div>,\n                )}\n              <div\n                className={cx(\n                  css({\n                    flex: \"1\",\n                    /* This is weird but it's necessary to truncate list items */\n                    minWidth: 0,\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                  }),\n                  truncate &&\n                    css({\n                      whiteSpace: \"nowrap\",\n                    }),\n                )}\n              >\n                {children}\n              </div>\n              {typeof endIcon !== \"undefined\" &&\n                cloneElements(\n                  endIconAs,\n                  <div\n                    className={cx(\n                      css({\n                        alignSelf: \"center\",\n                        display: \"flex\",\n                        flex: \"none\",\n                        justifyContent: \"flex-end\",\n                        marginLeft: getIconHorizontalPadding(iconSize),\n                        overflow: \"hidden\",\n                        whiteSpace: \"nowrap\",\n                        width: getIconSize(iconSize),\n                      }),\n                    )}\n                  >\n                    {endIcon}\n                  </div>,\n                )}\n            </div>,\n          )\n        }\n      </ClassNames>\n    );\n  },\n);\n"],"names":["cloneElements","_i","elements","React","ClassNames","_a","css","cx","length","reduce","accumulator","element","cloneElement","props","className","styles","style","ref","getIconHorizontalPadding","iconSize","assertUnreachable","getIconSize","getIconMarginLeft","ListItem","forwardRef","_b","as","children","endIcon","endIconAsProp","_c","highlighted","_d","interactive","_e","selected","startIcon","startIconAsProp","_f","useListConfig","hoverColor","margin","padding","selectedColor","truncate","listConfig","endIconAs","startIconAs","selectedTextColor","tinycolor","mostReadable","colors","white","grey","darker","level","size","toString","selectedBackgroundColor","selectedStyles","backgroundColor","color","highlightedStyles","verticalMargin","verticalListMarginFromPadding","alignItems","cursor","undefined","borderRadius","display","height","paddingLeft","paddingRight","paddingTop","paddingBottom","marginTop","marginBottom","alignSelf","flex","marginLeft","marginRight","overflow","whiteSpace","width","minWidth","textOverflow","justifyContent"],"mappings":"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"}