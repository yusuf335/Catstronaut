'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../fonts/fonts.js');
require('../base-91f9e1df.js');
require('../mono-a0d4bd30.js');
require('../colors/colors.js');
require('../SpaceKitProvider/index.js');
require('classnames');
require('../SingletonComponent-7ca6baa8.js');
var index$1 = require('../index-6241ea02.js');
require('@tippyjs/react');

/**
 * Display a non-interactive tooltip after an element is clicked on and then
 * remove the tooltip after a short period of time
 */

var ConfirmationTooltip = function (_a) {
  var children = _a.children,
      props = _tslib.__rest(_a, ["children"]);
  /**
   * Store result of `useTimeout` so we can cancel the timeout if this component
   * is unmounted before the timeout fires
   */


  var timeoutRef = React__default.useRef(null); // When this component is being unmounted, remove the timeout if one exists.
  // This will prevent trying to call methods on destroyed components

  React__default.useEffect(function () {
    return function () {
      if (timeoutRef.current) {
        window.clearTimeout(timeoutRef.current);
      }
    };
  }, []);
  return /*#__PURE__*/React__default.createElement(index$1.AbstractTooltip, _tslib.__assign({
    trigger: "click"
  }, props, {
    onShow: function (instance) {
      if (timeoutRef.current) {
        window.clearTimeout(timeoutRef.current);
      }

      timeoutRef.current = window.setTimeout(function () {
        instance.hide();
      }, 3000);
    },
    onHide: function () {
      if (timeoutRef.current) {
        window.clearTimeout(timeoutRef.current);
      }

      timeoutRef.current = null;
    }
  }), children);
};

exports.ConfirmationTooltip = ConfirmationTooltip;
//# sourceMappingURL=index.js.map
