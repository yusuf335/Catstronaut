{"version":3,"file":"Table.js","sources":["../src/Table/Table.tsx"],"sourcesContent":["import { ClassNames } from \"@emotion/core\";\nimport React from \"react\";\nimport * as typography from \"../typography\";\nimport { colors } from \"../colors\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\nimport { useSpaceKitProvider } from \"../SpaceKitProvider\";\n\ntype As = React.ReactElement | keyof JSX.IntrinsicElements;\n\n/**\n * Take an `as` value and make it into a `React.ReactElement`\n */\nfunction createElementFromAs(as: As): React.ReactElement {\n  return React.isValidElement(as)\n    ? as\n    : typeof as === \"string\"\n    ? React.createElement(as)\n    : assertUnreachable(as);\n}\n\ninterface Props<RowShape> {\n  /**\n   * color theme for alert\n   * @default \"light\"\n   */\n  theme?: \"light\" | \"dark\";\n\n  /**\n   * Override the the default element used to render the `table` element\n   *\n   * All props provided will be merged with props that this component adds,\n   * including `className`s being merged using emotion's `cx` function\n   *\n   * @default \"<table />\"\n   */\n  as?: React.ReactElement;\n\n  /**\n   * Component data\n   *\n   * The shape of the data will be inferred from here\n   */\n  data: ReadonlyArray<RowShape>;\n\n  /**\n   * How dense the table should be\n   *\n   * @default \"standard\"\n   */\n  density?: \"standard\" | \"condensed\" | \"relaxed\";\n\n  /**\n   * Function to run when a row is clicked\n   */\n  onRowClick?: (item: RowShape) => void;\n\n  /**\n   * Definition of how each column will be rendered\n   */\n  columns: readonly {\n    /**\n     * Override the the default element\n     *\n     * All props provided will be merged with props that this component adds,\n     * including `className`s being merged using emotion's `cx` function\n     *\n     * @default \"td\"\n     */\n    as?: As;\n\n    /**\n     * Column's title\n     */\n    headerTitle?: React.ReactNode | string;\n\n    /**\n     * Unique identifier for the column\n     *\n     * Initially, we'll just be using this for the `key` attribute on cells and\n     * `col`s\n     */\n    id: string | number;\n    /**\n     * Properties to be applied to `col` elements nested below the `table`'s\n     * single `<colgroup>`.\n     *\n     * This allows you to apply styles to columns by setting a class on a single\n     * element instead of _all_ elements in a table's row.\n     *\n     * Note that, per the [column\n     * spec](https://www.w3.org/TR/CSS2/tables.html#columns), there is a very\n     * limited set of style properties that can be applied to a column (via\n     * `style` or `className`):\n     * * `background`\n     * * `border`\n     * * `visiblity`\n     * * `width`\n     */\n    colProps?: React.DetailedHTMLProps<\n      React.ColHTMLAttributes<HTMLTableColElement>,\n      HTMLTableColElement\n    >;\n\n    /**\n     * Render function that renders the content for the column to be placed\n     * inside the `<td>`\n     *\n     * Since this is a render function, `React.createElement` will _not_ be\n     * called, nor will propTypes be checked. This is to prevent mounting and\n     * unmounting on each render\n     *\n     * Note: the signature of the method is the same as a `map` function\n     */\n    render: (\n      input: Readonly<RowShape>,\n      index: number,\n      list: readonly RowShape[],\n    ) => React.ReactNode;\n\n    /**\n     * Override the the default `th` element\n     *\n     * All props provided will be merged with props that this component adds,\n     * including `className`s being merged using emotion's `cx` function\n     *\n     * @default \"th\"\n     */\n    thAs?: As;\n  }[];\n\n  /**\n   * String or method to calculate the `key` for each row\n   *\n   * When re-ordering rows (by sorting or any other means), this will ensure\n   * that DOM elements are reused correctly.\n   *\n   * Can be a string representing a field in `RowData` (inferred from `data` or\n   * included as a generic to `<Table<RowData>>`) or a function that takes the\n   * row data and returns a key\n   */\n  keyOn: keyof RowShape | ((row: RowShape) => any);\n\n  /**\n   * Override the the default element used to render `tr` elements\n   *\n   * You can pass a single value that will be applied to both the `thead > tr`\n   * and `tbody> tr` or you can individiaully specify `head` and `body` values,\n   * both of which are optional.\n   *\n   * All props provided will be merged with props that this component adds,\n   * including `className`s being merged using emotion's `cx` function\n   *\n   * @default \"tr\"\n   */\n  trAs?:\n    | As\n    | {\n        head?: As;\n        body?: As;\n      };\n}\n\n/**\n * Tables provide a structure to data and a visual grid making it easier to see\n * relationships and are one of the most useful tools and formats for organizing\n * and communiting structured data.\n *\n * @see https://zpl.io/bAlrjJe\n */\nexport function Table<RowShape>({\n  as = <table />,\n  onRowClick,\n  data,\n  density = \"standard\",\n  columns,\n  keyOn,\n  trAs = \"tr\",\n  theme: propTheme,\n}: Props<RowShape>): ReturnType<React.FC> {\n  const { theme: providerTheme } = useSpaceKitProvider();\n  const theme = propTheme || providerTheme;\n\n  const padding = density === \"standard\" ? 8 : density === \"condensed\" ? 3 : 11;\n  const getRowKey =\n    typeof keyOn === \"function\" ? keyOn : (row: RowShape) => row[keyOn];\n\n  const headTrElement = React.isValidElement(trAs)\n    ? trAs\n    : typeof trAs === \"string\"\n    ? React.createElement(trAs)\n    : createElementFromAs(trAs.head || \"tr\");\n\n  const bodyTrElement = React.isValidElement(trAs)\n    ? trAs\n    : typeof trAs === \"string\"\n    ? React.createElement(trAs)\n    : createElementFromAs(trAs.body || \"tr\");\n\n  const border = `1px solid ${\n    theme === \"light\"\n      ? colors.silver.dark\n      : theme === \"dark\"\n      ? colors.midnight.dark\n      : assertUnreachable(theme)\n  }`;\n\n  return (\n    <ClassNames>\n      {({ css, cx }) =>\n        React.cloneElement(\n          as,\n          {\n            className: cx(\n              css({\n                borderCollapse: \"collapse\",\n                width: \"100%\",\n              }),\n              as.props.className,\n            ),\n          },\n          <>\n            <colgroup>\n              {columns.map(({ colProps, id }) => (\n                <col key={id} {...colProps} />\n              ))}\n            </colgroup>\n\n            {columns.filter((c) => c.headerTitle).length > 0 && (\n              <thead>\n                {React.cloneElement(\n                  headTrElement,\n                  {\n                    className: cx(\n                      css({\n                        ...typography.base.xsmall,\n                        borderBottom: border,\n                        borderTop: border,\n                        color:\n                          theme === \"light\"\n                            ? colors.grey.base\n                            : theme === \"dark\"\n                            ? colors.midnight.lighter\n                            : assertUnreachable(theme),\n                        textAlign: \"left\",\n                        textTransform: \"uppercase\",\n                      }),\n                      headTrElement.props.className,\n                    ),\n                  },\n                  <>\n                    {columns.map(\n                      ({ headerTitle, id, thAs = \"th\" }, colIndex) => {\n                        const element = createElementFromAs(thAs);\n\n                        return React.cloneElement(\n                          element,\n                          {\n                            className: css(\n                              css({\n                                fontWeight: 600,\n                                padding,\n                                paddingLeft: colIndex === 0 ? 0 : padding,\n                                paddingRight:\n                                  colIndex === columns.length - 1 ? 0 : padding,\n                              }),\n                              element.props.className,\n                            ),\n                            key: id,\n                          },\n                          headerTitle,\n                        );\n                      },\n                    )}\n                  </>,\n                )}\n              </thead>\n            )}\n            <tbody>\n              {data.map((item, index) =>\n                React.cloneElement(\n                  bodyTrElement,\n                  {\n                    key: getRowKey(item),\n                    ...(onRowClick\n                      ? {\n                          onClick: () => {\n                            onRowClick(item);\n                          },\n                          className: css({\n                            cursor: \"pointer\",\n                            \"&:hover\": {\n                              background:\n                                theme === \"light\"\n                                  ? colors.silver.light\n                                  : theme === \"dark\"\n                                  ? colors.midnight.darkest\n                                  : assertUnreachable(theme),\n                            },\n                          }),\n                        }\n                      : {}),\n                  },\n                  <>\n                    {columns.map(({ as = \"td\", render, id }, colIndex) => {\n                      const element = createElementFromAs(as);\n\n                      return React.cloneElement(\n                        element,\n                        {\n                          key: id,\n                          className: cx(\n                            css({\n                              // no border on the bottom row\n                              borderBottom:\n                                index === data.length - 1 ? `none` : border,\n                              padding,\n                              paddingLeft: colIndex === 0 ? 0 : padding,\n                              paddingRight:\n                                colIndex === columns.length - 1 ? 0 : padding,\n                            }),\n                            element.props.className,\n                          ),\n                        },\n                        render(item, index, data),\n                      );\n                    })}\n                  </>,\n                ),\n              )}\n            </tbody>\n          </>,\n        )\n      }\n    </ClassNames>\n  );\n}\n"],"names":["createElementFromAs","as","React","isValidElement","createElement","assertUnreachable","Table","_a","_b","onRowClick","data","_c","density","columns","keyOn","_d","trAs","propTheme","providerTheme","useSpaceKitProvider","theme","padding","getRowKey","row","headTrElement","head","bodyTrElement","body","border","colors","silver","dark","midnight","ClassNames","css","cx","cloneElement","className","borderCollapse","width","props","map","colProps","id","key","filter","c","headerTitle","length","typography","borderBottom","borderTop","color","grey","base","lighter","textAlign","textTransform","colIndex","thAs","element","fontWeight","paddingLeft","paddingRight","item","index","onClick","cursor","background","light","darkest","render"],"mappings":"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"}