'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../fonts/fonts.js');
var base$1 = require('../base-91f9e1df.js');
require('../mono-a0d4bd30.js');
var colors = require('../colors/colors.js');
var IconWarningSolid = require('../icons/IconWarningSolid.js');
var index = require('../index-14c98598.js');

/**
 * Component to render a form's error message
 *
 * This is intended to be rendered below `<FormControl>`. If this is rendered on
 * it's own; it will render `children` without any modification.
 */

var FormErrorMessage = function (_a) {
  var children = _a.children,
      className = _a.className;

  var _b = index.useFormControlInternalContext(),
      feedbackId = _b.feedbackId,
      setErrorMessageElement = _b.setErrorMessageElement;

  var element = React.useMemo(function () {
    return core.jsx("div", {
      className: className,
      css: core.css(_tslib.__assign(_tslib.__assign({}, base$1.small), {
        color: colors.colors.red.base,
        display: "flex"
      })),
      "aria-live": "polite",
      id: feedbackId
    }, core.jsx(IconWarningSolid.IconWarningSolid, {
      css: {
        height: 15,
        marginRight: 8,
        position: "relative",
        top: 2,
        width: 15
      }
    }), core.jsx("div", null, children));
  }, [className, feedbackId, children]);
  React.useLayoutEffect(function () {
    setErrorMessageElement === null || setErrorMessageElement === void 0 ? void 0 : setErrorMessageElement(element);
    return function () {
      // Clear the element to clean up after ourself. If we are merely changing,
      // then another `set` will be called quickly enough where this won't
      // flicker the content.
      setErrorMessageElement === null || setErrorMessageElement === void 0 ? void 0 : setErrorMessageElement(null);
    };
  }, [setErrorMessageElement, element]); // If `setErrorMessageElement` exists then we're rendering this under the form control
  // context provider. `FormControl` will pull that element from the context and
  // insert into the layout, so return `null`.

  return setErrorMessageElement ? null : element;
};

exports.FormErrorMessage = FormErrorMessage;
//# sourceMappingURL=index.js.map
