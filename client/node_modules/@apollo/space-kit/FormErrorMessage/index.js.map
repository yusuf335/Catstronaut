{"version":3,"file":"index.js","sources":["../src/FormErrorMessage/index.tsx"],"sourcesContent":["/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport * as React from \"react\";\nimport * as typography from \"../typography\";\nimport { colors } from \"../colors\";\nimport { css, jsx } from \"@emotion/core\";\nimport { useFormControlInternalContext } from \"../shared/FormControlContext\";\nimport { IconWarningSolid } from \"../icons/IconWarningSolid\";\n\ninterface Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\n/**\n * Component to render a form's error message\n *\n * This is intended to be rendered below `<FormControl>`. If this is rendered on\n * it's own; it will render `children` without any modification.\n */\nexport const FormErrorMessage: React.FC<Props> = ({ children, className }) => {\n  const {\n    feedbackId,\n    setErrorMessageElement,\n  } = useFormControlInternalContext();\n\n  const element = React.useMemo(() => {\n    return (\n      <div\n        className={className}\n        css={css({\n          ...typography.base.small,\n          color: colors.red.base,\n          display: \"flex\",\n        })}\n        aria-live=\"polite\"\n        id={feedbackId}\n      >\n        <IconWarningSolid\n          css={{\n            height: 15,\n            marginRight: 8,\n            position: \"relative\",\n            top: 2,\n            width: 15,\n          }}\n        />\n\n        <div>{children}</div>\n      </div>\n    );\n  }, [className, feedbackId, children]);\n\n  React.useLayoutEffect(() => {\n    setErrorMessageElement?.(element);\n\n    return () => {\n      // Clear the element to clean up after ourself. If we are merely changing,\n      // then another `set` will be called quickly enough where this won't\n      // flicker the content.\n      setErrorMessageElement?.(null);\n    };\n  }, [setErrorMessageElement, element]);\n\n  // If `setErrorMessageElement` exists then we're rendering this under the form control\n  // context provider. `FormControl` will pull that element from the context and\n  // insert into the layout, so return `null`.\n  return setErrorMessageElement ? null : element;\n};\n"],"names":["FormErrorMessage","_a","children","className","_b","useFormControlInternalContext","feedbackId","setErrorMessageElement","element","React","jsx","css","typography","color","colors","red","base","display","id","IconWarningSolid","height","marginRight","position","top","width"],"mappings":";;;;;;;;;;;;;;;;;AAcA;;;;;;;AAMA,IAAaA,gBAAgB,GAAoB,UAACC,EAAD;MAAGC,QAAQ;MAAEC,SAAS;;MAC/DC,KAGFC,mCAA6B,EAH3B;MACJC,UAAU,gBADN;MAEJC,sBAAsB,4BAFlB;;MAKAC,OAAO,GAAGC,aAAA,CAAc;WAE1BC;MACEP,SAAS,EAAEA;MACXQ,GAAG,EAAEA,QAAG,qCACHC;QACHC,KAAK,EAAEC,aAAM,CAACC,GAAP,CAAWC;QAClBC,OAAO,EAAE;QAHH;mBAKE;MACVC,EAAE,EAAEZ;OAEJI,SAACS;MACCR,GAAG,EAAE;QACHS,MAAM,EAAE,EADL;QAEHC,WAAW,EAAE,CAFV;QAGHC,QAAQ,EAAE,UAHP;QAIHC,GAAG,EAAE,CAJF;QAKHC,KAAK,EAAE;;QAIXd,sBAAMR,UArBV;GADc,EAyBb,CAACC,SAAD,EAAYG,UAAZ,EAAwBJ,QAAxB,CAzBa,CAAhB;EA2BAO,qBAAA,CAAsB;IACpBF,sBAAsB,SAAtB,IAAAA,sBAAsB,WAAtB,SAAA,GAAAA,sBAAsB,CAAGC,OAAH,CAAtB;WAEO;;;;MAILD,sBAAsB,SAAtB,IAAAA,sBAAsB,WAAtB,SAAA,GAAAA,sBAAsB,CAAG,IAAH,CAAtB;KAJF;GAHF,EASG,CAACA,sBAAD,EAAyBC,OAAzB,CATH;;;;SAcOD,sBAAsB,GAAG,IAAH,GAAUC,OAAvC;CA/CK;;;;"}