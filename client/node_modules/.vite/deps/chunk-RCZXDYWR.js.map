{
  "version": 3,
  "sources": ["../../@apollo/space-kit/src/SpaceKitProvider/index.tsx", "../../@apollo/space-kit/src/Loaders/LoadingSpinner.tsx"],
  "sourcesContent": ["import React, { useEffect, useMemo } from \"react\";\n\ninterface State {\n  /**\n   * Disable all JavaScript based animations\n   *\n   * This includes Framer Motion animations and manual css values.\n   *\n   * @default false\n   */\n  disableAnimations: boolean;\n\n  singletonComponents: Record<\n    string,\n    {\n      element: ReturnType<React.FC>;\n      instanceCount: React.MutableRefObject<number>;\n    }\n  >;\n\n  theme: \"light\" | \"dark\";\n}\n\nconst defaultState: State = {\n  disableAnimations: false,\n  singletonComponents: {},\n  theme: \"light\",\n};\n\n// This implementation is based on the excellent blog post by Kent C. Dodds on\n// How to use React Context effectively:\n// https://kentcdodds.com/blog/how-to-use-react-context-effectively\n\nconst SpaceKitStateContext = React.createContext<State | undefined>(undefined);\nconst SpaceKitSetContext = React.createContext<\n  React.Dispatch<React.SetStateAction<State>> | undefined\n>(undefined);\n\n/**\n * Provider to set options on all Space Kit components\n *\n * This is completely optional; components will not have issues if this is\n * missing from the context.\n *\n * A good place to use this would be in your storybook configuration as a\n * decorator applied to all components if we're running inside of chromatic.\n */\nexport const SpaceKitProvider: React.FC<Partial<\n  Pick<State, \"theme\" | \"disableAnimations\">\n>> = ({ children, theme, disableAnimations }) => {\n  const nextState = useMemo(\n    () => ({\n      theme: theme ?? defaultState.theme,\n      disableAnimations: disableAnimations ?? defaultState.disableAnimations,\n      singletonComponents: {},\n    }),\n    [theme, disableAnimations],\n  );\n  const [state, setState] = React.useState<State>(nextState);\n\n  useEffect(() => {\n    setState((currState) => ({\n      ...nextState,\n      singletonComponents: currState.singletonComponents,\n    }));\n  }, [nextState]);\n\n  return (\n    <SpaceKitStateContext.Provider value={state}>\n      <SpaceKitSetContext.Provider value={setState}>\n        {Object.entries(state?.singletonComponents ?? {}).map(\n          ([identity, { element }]) => {\n            return <React.Fragment key={identity}>{element}</React.Fragment>;\n          },\n        )}\n        {children}\n      </SpaceKitSetContext.Provider>\n    </SpaceKitStateContext.Provider>\n  );\n};\n\n/**\n * Hook to indicate if the current component is being rendered inside of a\n * `SpaceKitProvider`\n */\nexport function useHasSpaceKitProvider(): boolean {\n  return !!React.useContext(SpaceKitStateContext);\n}\n\n/**\n * Hook to get the values from the Space Kit Provider with sensible defaults for\n * all the values.\n *\n * This component does _not_ require us to be wrapped with `SpaceKitProvider`\n */\nexport function useSpaceKitProvider(): Readonly<State> {\n  const context = React.useContext(SpaceKitStateContext);\n\n  if (context == null) {\n    // Provide a default because consumers are not required to wrap their\n    // components with our providers\n    return defaultState;\n  }\n\n  return context;\n}\n\n/**\n * Hook intended to be used internally to communicate with `SpaceKitProvider`\n * indicating singleton components being mounted and unmounted.\n *\n * Use `show` to track when you show a component.\n *\n * Use `hide` to track when you remove a component.\n */\nexport function useSingletonComponent(): {\n  hide: ({ identity }: { identity: string }) => void;\n  show: ({\n    identity,\n    element,\n  }: {\n    identity: string;\n    element: ReturnType<React.FC>;\n  }) => void;\n} {\n  const setSpaceKitContext = React.useContext(SpaceKitSetContext);\n\n  const hide = React.useCallback(\n    ({ identity }: { identity: string }) => {\n      setSpaceKitContext?.((state = defaultState) => {\n        if (!state.singletonComponents[identity]) {\n          // This should never happen; we should never be trying to decrement\n          // something that isn't rendered.\n          return state;\n        }\n\n        if (state.singletonComponents[identity].instanceCount.current === 1) {\n          // This is the last instance; delete it from the component and return\n          // a new state to trigger a re-render.\n          const singletonComponentsCopy = { ...state.singletonComponents };\n          delete singletonComponentsCopy[identity];\n\n          return {\n            ...state,\n            singletonComponents: singletonComponentsCopy,\n          };\n        }\n\n        // Decrement the instance count and return the original `state` so this\n        // won't trigger a re-render.\n        state.singletonComponents[identity].instanceCount.current -= 1;\n        return state;\n      });\n    },\n    [setSpaceKitContext],\n  );\n\n  const show = React.useCallback(\n    ({\n      identity,\n      element,\n    }: {\n      identity: string;\n      element: ReturnType<React.FC>;\n    }) => {\n      setSpaceKitContext?.((previousState = defaultState) => {\n        if (!previousState.singletonComponents[identity]) {\n          // This is the first time ths identity is being rendered. Create the\n          // entry in `singletonComponents` and modify `state` to trigger a\n          // re-render.\n          return {\n            ...previousState,\n            singletonComponents: {\n              ...previousState.singletonComponents,\n              [identity]: { element, instanceCount: { current: 1 } },\n            },\n          };\n        }\n\n        // This identity exists. Increment the instanceCount and return the\n        // original state to avoid a re-render.\n        previousState.singletonComponents[identity].instanceCount.current += 1;\n        return previousState;\n      });\n    },\n    [setSpaceKitContext],\n  );\n\n  return { hide, show };\n}\n", "/** @jsx jsx */\nimport React from \"react\";\nimport type { Property } from \"csstype\";\nimport { jsx, keyframes } from \"@emotion/core\";\nimport { colors } from \"../colors\";\nimport { useSpaceKitProvider } from \"../SpaceKitProvider\";\n\nexport type Size = \"large\" | \"medium\" | \"small\" | \"xsmall\" | \"2xsmall\";\nexport type Theme = \"light\" | \"dark\" | \"grayscale\";\ninterface Props {\n  /**\n   * Class name that will be applied to the svg\n   */\n  className?: string;\n\n  /**\n   * Theme for the spinner\n   * @default \"light\"\n   */\n  theme?: Theme;\n\n  /**\n   * Size of the spinner\n   * @default \"medium\"\n   */\n  size?: Size;\n}\n\nexport const LoadingSpinner = React.forwardRef<SVGSVGElement, Props>(\n  ({ theme: propTheme, size = \"medium\", className, ...props }, ref) => {\n    const { theme: providerTheme } = useSpaceKitProvider();\n    const theme = propTheme || providerTheme;\n\n    /* Length of animation */\n    const DURATION = 1000;\n\n    const SPIN = keyframes`\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  `;\n\n    const SIZE_MAP: Record<Size, number> = {\n      large: 90,\n      medium: 64,\n      small: 48,\n      xsmall: 32,\n      \"2xsmall\": 16,\n    };\n\n    const THEME_MAP: Record<\n      Theme,\n      {\n        orbitColor: Property.Color;\n        orbitOpacity: Property.Opacity;\n        asteroidColor: Property.Color;\n      }\n    > = {\n      light: {\n        orbitColor: colors.silver.base,\n        orbitOpacity: 1,\n        asteroidColor: colors.blue.base,\n      },\n      dark: {\n        orbitColor: colors.white,\n        orbitOpacity: 0.5,\n        asteroidColor: colors.white,\n      },\n      grayscale: {\n        orbitColor: colors.silver.darker,\n        orbitOpacity: 1,\n        asteroidColor: colors.grey.light,\n      },\n    };\n\n    const { disableAnimations } = useSpaceKitProvider();\n\n    const { orbitColor, orbitOpacity, asteroidColor } = THEME_MAP[theme];\n\n    const pixelSize = SIZE_MAP[size];\n\n    const mountTime = React.useRef(Date.now());\n    const mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);\n\n    return (\n      <svg\n        className={className}\n        ref={ref}\n        role=\"progressbar\"\n        viewBox=\"0 0 100 100\"\n        css={{\n          width: pixelSize,\n          height: pixelSize,\n        }}\n        {...props}\n      >\n        <circle\n          strokeWidth=\"8\"\n          stroke={orbitColor}\n          strokeOpacity={orbitOpacity}\n          fill=\"transparent\"\n          r=\"41\"\n          cx=\"50\"\n          cy=\"50\"\n        />\n        <g transform=\"translate(50 50)\">\n          <circle\n            css={{\n              animation: `${SPIN} ${DURATION}ms linear infinite`,\n              willChange: \"transform\",\n              animationDelay: `${mountDelay}ms`,\n            }}\n            fill={asteroidColor}\n            r=\"10\"\n            cx=\"40\"\n            cy=\"0\"\n          />\n        </g>\n      </svg>\n    );\n  },\n);\n"],
  "mappings": "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",
  "names": ["defaultState", "disableAnimations", "singletonComponents", "theme", "SpaceKitStateContext", "React", "createContext", "undefined", "SpaceKitSetContext", "SpaceKitProvider", "_a", "children", "nextState", "useMemo", "_c", "useState", "state", "setState", "useEffect", "currState", "Provider", "value", "Object", "entries", "map", "identity", "element", "Fragment", "key", "useHasSpaceKitProvider", "useContext", "useSpaceKitProvider", "context", "useSingletonComponent", "setSpaceKitContext", "hide", "useCallback", "instanceCount", "current", "singletonComponentsCopy", "show", "previousState", "LoadingSpinner", "React", "forwardRef", "_a", "ref", "propTheme", "_b", "size", "className", "props", "providerTheme", "useSpaceKitProvider", "theme", "DURATION", "SPIN", "keyframes", "SIZE_MAP", "large", "medium", "small", "xsmall", "THEME_MAP", "light", "orbitColor", "colors", "silver", "base", "orbitOpacity", "asteroidColor", "blue", "dark", "white", "grayscale", "darker", "grey", "disableAnimations", "_c", "pixelSize", "mountTime", "useRef", "Date", "now", "mountDelay", "current", "jsx", "role", "viewBox", "css", "width", "height", "strokeWidth", "stroke", "strokeOpacity", "fill", "r", "cx", "cy", "transform", "animation", "willChange", "animationDelay"]
}
