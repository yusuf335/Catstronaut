import {
  require_colors
} from "./chunk-SGXSLZSF.js";
import {
  require_tslib_bcbe0269
} from "./chunk-K7JKGRAC.js";
import {
  core_browser_esm_exports,
  init_core_browser_esm
} from "./chunk-NBM23E2Q.js";
import {
  require_react
} from "./chunk-GHX6QOSA.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-2GTGKKMZ.js";

// node_modules/@apollo/space-kit/SpaceKitProvider/index.js
var require_SpaceKitProvider = __commonJS({
  "node_modules/@apollo/space-kit/SpaceKitProvider/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var _tslib = require_tslib_bcbe0269();
    var React = require_react();
    var React__default = _interopDefault(React);
    var defaultState = {
      disableAnimations: false,
      singletonComponents: {},
      theme: "light"
    };
    var SpaceKitStateContext = React__default.createContext(void 0);
    var SpaceKitSetContext = React__default.createContext(void 0);
    var SpaceKitProvider = function(_a) {
      var _b;
      var children = _a.children, theme = _a.theme, disableAnimations = _a.disableAnimations;
      var nextState = React.useMemo(function() {
        return {
          theme: theme !== null && theme !== void 0 ? theme : defaultState.theme,
          disableAnimations: disableAnimations !== null && disableAnimations !== void 0 ? disableAnimations : defaultState.disableAnimations,
          singletonComponents: {}
        };
      }, [theme, disableAnimations]);
      var _c = React__default.useState(nextState), state = _c[0], setState = _c[1];
      React.useEffect(function() {
        setState(function(currState) {
          return _tslib.__assign(_tslib.__assign({}, nextState), {
            singletonComponents: currState.singletonComponents
          });
        });
      }, [nextState]);
      return React__default.createElement(SpaceKitStateContext.Provider, {
        value: state
      }, React__default.createElement(SpaceKitSetContext.Provider, {
        value: setState
      }, Object.entries((_b = state === null || state === void 0 ? void 0 : state.singletonComponents) !== null && _b !== void 0 ? _b : {}).map(function(_a2) {
        var identity = _a2[0], element = _a2[1].element;
        return React__default.createElement(React__default.Fragment, {
          key: identity
        }, element);
      }), children));
    };
    function useHasSpaceKitProvider() {
      return !!React__default.useContext(SpaceKitStateContext);
    }
    function useSpaceKitProvider() {
      var context = React__default.useContext(SpaceKitStateContext);
      if (context == null) {
        return defaultState;
      }
      return context;
    }
    function useSingletonComponent() {
      var setSpaceKitContext = React__default.useContext(SpaceKitSetContext);
      var hide = React__default.useCallback(function(_a) {
        var identity = _a.identity;
        setSpaceKitContext === null || setSpaceKitContext === void 0 ? void 0 : setSpaceKitContext(function(state) {
          if (state === void 0) {
            state = defaultState;
          }
          if (!state.singletonComponents[identity]) {
            return state;
          }
          if (state.singletonComponents[identity].instanceCount.current === 1) {
            var singletonComponentsCopy = _tslib.__assign({}, state.singletonComponents);
            delete singletonComponentsCopy[identity];
            return _tslib.__assign(_tslib.__assign({}, state), {
              singletonComponents: singletonComponentsCopy
            });
          }
          state.singletonComponents[identity].instanceCount.current -= 1;
          return state;
        });
      }, [setSpaceKitContext]);
      var show = React__default.useCallback(function(_a) {
        var identity = _a.identity, element = _a.element;
        setSpaceKitContext === null || setSpaceKitContext === void 0 ? void 0 : setSpaceKitContext(function(previousState) {
          var _a2;
          if (previousState === void 0) {
            previousState = defaultState;
          }
          if (!previousState.singletonComponents[identity]) {
            return _tslib.__assign(_tslib.__assign({}, previousState), {
              singletonComponents: _tslib.__assign(_tslib.__assign({}, previousState.singletonComponents), (_a2 = {}, _a2[identity] = {
                element,
                instanceCount: {
                  current: 1
                }
              }, _a2))
            });
          }
          previousState.singletonComponents[identity].instanceCount.current += 1;
          return previousState;
        });
      }, [setSpaceKitContext]);
      return {
        hide,
        show
      };
    }
    exports.SpaceKitProvider = SpaceKitProvider;
    exports.useHasSpaceKitProvider = useHasSpaceKitProvider;
    exports.useSingletonComponent = useSingletonComponent;
    exports.useSpaceKitProvider = useSpaceKitProvider;
  }
});

// node_modules/@apollo/space-kit/Loaders/LoadingSpinner.js
var require_LoadingSpinner = __commonJS({
  "node_modules/@apollo/space-kit/Loaders/LoadingSpinner.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var _tslib = require_tslib_bcbe0269();
    var core = (init_core_browser_esm(), __toCommonJS(core_browser_esm_exports));
    var React = require_react();
    var React__default = _interopDefault(React);
    var colors = require_colors();
    var index = require_SpaceKitProvider();
    var LoadingSpinner = React__default.forwardRef(function(_a, ref) {
      var propTheme = _a.theme, _b = _a.size, size = _b === void 0 ? "medium" : _b, className = _a.className, props = _tslib.__rest(_a, ["theme", "size", "className"]);
      var providerTheme = index.useSpaceKitProvider().theme;
      var theme = propTheme || providerTheme;
      var DURATION = 1e3;
      var SPIN = core.keyframes(templateObject_1 || (templateObject_1 = _tslib.__makeTemplateObject(["\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  "], ["\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  "])));
      var SIZE_MAP = {
        large: 90,
        medium: 64,
        small: 48,
        xsmall: 32,
        "2xsmall": 16
      };
      var THEME_MAP = {
        light: {
          orbitColor: colors.colors.silver.base,
          orbitOpacity: 1,
          asteroidColor: colors.colors.blue.base
        },
        dark: {
          orbitColor: colors.colors.white,
          orbitOpacity: 0.5,
          asteroidColor: colors.colors.white
        },
        grayscale: {
          orbitColor: colors.colors.silver.darker,
          orbitOpacity: 1,
          asteroidColor: colors.colors.grey.light
        }
      };
      var disableAnimations = index.useSpaceKitProvider().disableAnimations;
      var _c = THEME_MAP[theme], orbitColor = _c.orbitColor, orbitOpacity = _c.orbitOpacity, asteroidColor = _c.asteroidColor;
      var pixelSize = SIZE_MAP[size];
      var mountTime = React__default.useRef(Date.now());
      var mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);
      return core.jsx("svg", _tslib.__assign({
        className,
        ref,
        role: "progressbar",
        viewBox: "0 0 100 100",
        css: {
          width: pixelSize,
          height: pixelSize
        }
      }, props), core.jsx("circle", {
        strokeWidth: "8",
        stroke: orbitColor,
        strokeOpacity: orbitOpacity,
        fill: "transparent",
        r: "41",
        cx: "50",
        cy: "50"
      }), core.jsx("g", {
        transform: "translate(50 50)"
      }, core.jsx("circle", {
        css: {
          animation: SPIN + " " + DURATION + "ms linear infinite",
          willChange: "transform",
          animationDelay: mountDelay + "ms"
        },
        fill: asteroidColor,
        r: "10",
        cx: "40",
        cy: "0"
      })));
    });
    var templateObject_1;
    exports.LoadingSpinner = LoadingSpinner;
  }
});

export {
  require_SpaceKitProvider,
  require_LoadingSpinner
};
//# sourceMappingURL=chunk-RCZXDYWR.js.map
